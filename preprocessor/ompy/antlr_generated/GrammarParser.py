# Generated from /Users/calebhuck/PycharmProjects/OpenMPy/preprocessor/Grammar.g4 by ANTLR 4.9.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3z")
        buf.write("\u0522\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\3\2\3\2\7\2\u00dd\n")
        buf.write("\2\f\2\16\2\u00e0\13\2\3\2\3\2\3\3\3\3\3\3\5\3\u00e7\n")
        buf.write("\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u00f6\n\5\3\6\3\6\3\6\3\6\3\6\7\6\u00fd\n\6\f\6\16")
        buf.write("\6\u0100\13\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7")
        buf.write("\u010b\n\7\f\7\16\7\u010e\13\7\3\7\3\7\3\b\3\b\5\b\u0114")
        buf.write("\n\b\3\b\5\b\u0117\n\b\3\b\3\b\3\t\3\t\3\t\5\t\u011e\n")
        buf.write("\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r")
        buf.write("\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\22\7\22\u0143\n\22\f\22\16\22\u0146\13\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\23\7\23\u014e\n\23\f\23\16\23\u0151")
        buf.write("\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3")
        buf.write("\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0163\n\26\f\26")
        buf.write("\16\26\u0166\13\26\3\26\3\26\3\27\3\27\3\27\3\27\5\27")
        buf.write("\u016e\n\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\5\30\u017c\n\30\3\30\3\30\5\30\u0180")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\32\3\32\3\32\7\32\u018f\n\32\f\32\16\32\u0192\13\32")
        buf.write("\3\32\5\32\u0195\n\32\3\32\3\32\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\5\33\u01a2\n\33\3\34\3\34\3\34")
        buf.write("\3\34\3\34\5\34\u01a9\n\34\3\35\3\35\7\35\u01ad\n\35\f")
        buf.write("\35\16\35\u01b0\13\35\3\35\3\35\3\36\3\36\3\36\3\36\5")
        buf.write("\36\u01b8\n\36\3\36\5\36\u01bb\n\36\3\36\3\36\3\37\6\37")
        buf.write("\u01c0\n\37\r\37\16\37\u01c1\3 \3 \3 \3 \5 \u01c8\n \3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3\"\3\"\5\"\u01d2\n\"\3\"\3\"\3\"")
        buf.write("\3#\3#\5#\u01d9\n#\3#\3#\3$\3$\3$\5$\u01e0\n$\3$\3$\3")
        buf.write("$\3$\5$\u01e6\n$\7$\u01e8\n$\f$\16$\u01eb\13$\3$\3$\3")
        buf.write("$\5$\u01f0\n$\3$\3$\3$\3$\5$\u01f6\n$\7$\u01f8\n$\f$\16")
        buf.write("$\u01fb\13$\3$\3$\3$\3$\5$\u0201\n$\5$\u0203\n$\5$\u0205")
        buf.write("\n$\3$\3$\3$\5$\u020a\n$\5$\u020c\n$\5$\u020e\n$\3$\3")
        buf.write("$\5$\u0212\n$\3$\3$\3$\3$\5$\u0218\n$\7$\u021a\n$\f$\16")
        buf.write("$\u021d\13$\3$\3$\3$\3$\5$\u0223\n$\5$\u0225\n$\5$\u0227")
        buf.write("\n$\3$\3$\3$\5$\u022c\n$\5$\u022e\n$\3%\3%\3%\5%\u0233")
        buf.write("\n%\3&\3&\3&\5&\u0238\n&\3&\3&\3&\3&\5&\u023e\n&\7&\u0240")
        buf.write("\n&\f&\16&\u0243\13&\3&\3&\3&\5&\u0248\n&\3&\3&\3&\3&")
        buf.write("\5&\u024e\n&\7&\u0250\n&\f&\16&\u0253\13&\3&\3&\3&\3&")
        buf.write("\5&\u0259\n&\5&\u025b\n&\5&\u025d\n&\3&\3&\3&\5&\u0262")
        buf.write("\n&\5&\u0264\n&\5&\u0266\n&\3&\3&\5&\u026a\n&\3&\3&\3")
        buf.write("&\3&\5&\u0270\n&\7&\u0272\n&\f&\16&\u0275\13&\3&\3&\3")
        buf.write("&\3&\5&\u027b\n&\5&\u027d\n&\5&\u027f\n&\3&\3&\3&\5&\u0284")
        buf.write("\n&\5&\u0286\n&\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0292")
        buf.write("\n(\3)\3)\3)\3)\3)\5)\u0299\n)\3)\3)\3)\5)\u029e\n)\7")
        buf.write(")\u02a0\n)\f)\16)\u02a3\13)\5)\u02a5\n)\3*\3*\3*\3*\5")
        buf.write("*\u02ab\n*\3+\3+\5+\u02af\n+\3+\3+\3+\5+\u02b4\n+\7+\u02b6")
        buf.write("\n+\f+\16+\u02b9\13+\3+\5+\u02bc\n+\3,\3,\3-\3-\3-\3.")
        buf.write("\3.\3/\3/\3/\3/\3/\5/\u02ca\n/\3\60\3\60\3\61\3\61\3\62")
        buf.write("\3\62\5\62\u02d2\n\62\3\63\3\63\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u02da\n\64\5\64\u02dc\n\64\3\65\3\65\5\65\u02e0\n")
        buf.write("\65\3\66\3\66\3\66\3\67\3\67\7\67\u02e7\n\67\f\67\16\67")
        buf.write("\u02ea\13\67\3\67\3\67\6\67\u02ee\n\67\r\67\16\67\u02ef")
        buf.write("\5\67\u02f2\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5")
        buf.write("\67\u02fb\n\67\38\38\38\58\u0300\n8\39\39\39\59\u0305")
        buf.write("\n9\3:\3:\3:\7:\u030a\n:\f:\16:\u030d\13:\3:\5:\u0310")
        buf.write("\n:\3;\3;\3;\7;\u0315\n;\f;\16;\u0318\13;\3<\3<\3<\7<")
        buf.write("\u031d\n<\f<\16<\u0320\13<\3=\3=\3=\3=\7=\u0326\n=\f=")
        buf.write("\16=\u0329\13=\3>\3>\3>\3>\7>\u032f\n>\f>\16>\u0332\13")
        buf.write(">\3?\3?\3?\3?\5?\u0338\n?\3@\3@\3@\3@\5@\u033e\n@\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\7A\u0349\nA\fA\16A\u034c\13A\3")
        buf.write("A\3A\3A\5A\u0351\nA\3B\3B\3B\3B\3B\3B\3B\5B\u035a\nB\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u0365\nC\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\6D\u036e\nD\rD\16D\u036f\3D\3D\3D\5D\u0375\nD\3D")
        buf.write("\3D\3D\5D\u037a\nD\3D\3D\3D\5D\u037f\nD\3E\3E\3E\3E\7")
        buf.write("E\u0385\nE\fE\16E\u0388\13E\3E\3E\3E\3F\3F\3F\5F\u0390")
        buf.write("\nF\3G\3G\3G\3G\5G\u0396\nG\5G\u0398\nG\3H\3H\3H\3H\6")
        buf.write("H\u039e\nH\rH\16H\u039f\3H\3H\5H\u03a4\nH\3I\3I\3I\3I")
        buf.write("\3I\3I\5I\u03ac\nI\3I\5I\u03af\nI\3J\3J\5J\u03b3\nJ\3")
        buf.write("K\3K\5K\u03b7\nK\3K\3K\3K\3L\3L\5L\u03be\nL\3L\3L\3L\3")
        buf.write("M\3M\3M\7M\u03c6\nM\fM\16M\u03c9\13M\3N\3N\3N\7N\u03ce")
        buf.write("\nN\fN\16N\u03d1\13N\3O\3O\3O\5O\u03d6\nO\3P\3P\3P\3P")
        buf.write("\7P\u03dc\nP\fP\16P\u03df\13P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q")
        buf.write("\3Q\3Q\3Q\3Q\3Q\5Q\u03ee\nQ\3R\3R\3R\3S\3S\3S\7S\u03f6")
        buf.write("\nS\fS\16S\u03f9\13S\3T\3T\3T\7T\u03fe\nT\fT\16T\u0401")
        buf.write("\13T\3U\3U\3U\7U\u0406\nU\fU\16U\u0409\13U\3V\3V\3V\7")
        buf.write("V\u040e\nV\fV\16V\u0411\13V\3W\3W\3W\7W\u0416\nW\fW\16")
        buf.write("W\u0419\13W\3X\3X\3X\7X\u041e\nX\fX\16X\u0421\13X\3Y\3")
        buf.write("Y\3Y\5Y\u0426\nY\3Z\3Z\3Z\5Z\u042b\nZ\3[\5[\u042e\n[\3")
        buf.write("[\3[\7[\u0432\n[\f[\16[\u0435\13[\3\\\3\\\3\\\5\\\u043a")
        buf.write("\n\\\3\\\3\\\3\\\5\\\u043f\n\\\3\\\3\\\3\\\5\\\u0444\n")
        buf.write("\\\3\\\3\\\3\\\3\\\6\\\u044a\n\\\r\\\16\\\u044b\3\\\3")
        buf.write("\\\3\\\3\\\5\\\u0452\n\\\3]\3]\5]\u0456\n]\3]\3]\3]\3")
        buf.write("]\5]\u045c\n]\7]\u045e\n]\f]\16]\u0461\13]\3]\5]\u0464")
        buf.write("\n]\5]\u0466\n]\3^\3^\5^\u046a\n^\3^\3^\3^\3^\3^\3^\3")
        buf.write("^\5^\u0473\n^\3_\3_\3_\7_\u0478\n_\f_\16_\u047b\13_\3")
        buf.write("_\5_\u047e\n_\3`\3`\5`\u0482\n`\3`\3`\5`\u0486\n`\3`\5")
        buf.write("`\u0489\n`\5`\u048b\n`\3a\3a\5a\u048f\na\3b\3b\5b\u0493")
        buf.write("\nb\3b\3b\3b\5b\u0498\nb\7b\u049a\nb\fb\16b\u049d\13b")
        buf.write("\3b\5b\u04a0\nb\3c\3c\3c\7c\u04a5\nc\fc\16c\u04a8\13c")
        buf.write("\3c\5c\u04ab\nc\3d\3d\3d\3d\3d\3d\5d\u04b3\nd\3d\3d\3")
        buf.write("d\3d\3d\3d\3d\3d\5d\u04bd\nd\7d\u04bf\nd\fd\16d\u04c2")
        buf.write("\13d\3d\5d\u04c5\nd\5d\u04c7\nd\3d\3d\5d\u04cb\nd\3d\3")
        buf.write("d\3d\3d\5d\u04d1\nd\7d\u04d3\nd\fd\16d\u04d6\13d\3d\5")
        buf.write("d\u04d9\nd\5d\u04db\nd\5d\u04dd\nd\3e\3e\3e\3e\5e\u04e3")
        buf.write("\ne\3e\5e\u04e6\ne\3e\3e\3e\3f\3f\3f\7f\u04ee\nf\ff\16")
        buf.write("f\u04f1\13f\3f\5f\u04f4\nf\3g\3g\5g\u04f8\ng\3g\3g\3g")
        buf.write("\3g\3g\3g\3g\3g\5g\u0502\ng\3h\3h\5h\u0506\nh\3i\5i\u0509")
        buf.write("\ni\3i\3i\3i\3i\3i\5i\u0510\ni\3j\3j\3j\5j\u0515\nj\3")
        buf.write("k\3k\3l\3l\5l\u051b\nl\3m\3m\3m\5m\u0520\nm\3m\2\2n\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\2\n\5\2QQjlnn\6\2")
        buf.write("\22\25JJTVYZ\3\2jv\3\2HI\3\2WX\3\2YZ\5\2JJ[]hh\4\2YZ^")
        buf.write("^\2\u05a5\2\u00de\3\2\2\2\4\u00e6\3\2\2\2\6\u00e8\3\2")
        buf.write("\2\2\b\u00f5\3\2\2\2\n\u00f7\3\2\2\2\f\u0103\3\2\2\2\16")
        buf.write("\u0111\3\2\2\2\20\u011a\3\2\2\2\22\u0121\3\2\2\2\24\u0124")
        buf.write("\3\2\2\2\26\u0127\3\2\2\2\30\u012a\3\2\2\2\32\u012d\3")
        buf.write("\2\2\2\34\u0130\3\2\2\2\36\u0133\3\2\2\2 \u013a\3\2\2")
        buf.write("\2\"\u013e\3\2\2\2$\u0149\3\2\2\2&\u0154\3\2\2\2(\u0158")
        buf.write("\3\2\2\2*\u015c\3\2\2\2,\u0169\3\2\2\2.\u0171\3\2\2\2")
        buf.write("\60\u0186\3\2\2\2\62\u018b\3\2\2\2\64\u01a1\3\2\2\2\66")
        buf.write("\u01a8\3\2\2\28\u01aa\3\2\2\2:\u01b3\3\2\2\2<\u01bf\3")
        buf.write("\2\2\2>\u01c3\3\2\2\2@\u01c9\3\2\2\2B\u01cc\3\2\2\2D\u01d6")
        buf.write("\3\2\2\2F\u022d\3\2\2\2H\u022f\3\2\2\2J\u0285\3\2\2\2")
        buf.write("L\u0287\3\2\2\2N\u0291\3\2\2\2P\u0293\3\2\2\2R\u02a6\3")
        buf.write("\2\2\2T\u02ae\3\2\2\2V\u02bd\3\2\2\2X\u02bf\3\2\2\2Z\u02c2")
        buf.write("\3\2\2\2\\\u02c9\3\2\2\2^\u02cb\3\2\2\2`\u02cd\3\2\2\2")
        buf.write("b\u02cf\3\2\2\2d\u02d3\3\2\2\2f\u02d5\3\2\2\2h\u02df\3")
        buf.write("\2\2\2j\u02e1\3\2\2\2l\u02e4\3\2\2\2n\u02fc\3\2\2\2p\u0301")
        buf.write("\3\2\2\2r\u0306\3\2\2\2t\u0311\3\2\2\2v\u0319\3\2\2\2")
        buf.write("x\u0321\3\2\2\2z\u032a\3\2\2\2|\u0333\3\2\2\2~\u0339\3")
        buf.write("\2\2\2\u0080\u033f\3\2\2\2\u0082\u0352\3\2\2\2\u0084\u035b")
        buf.write("\3\2\2\2\u0086\u0366\3\2\2\2\u0088\u0380\3\2\2\2\u008a")
        buf.write("\u038c\3\2\2\2\u008c\u0391\3\2\2\2\u008e\u03a3\3\2\2\2")
        buf.write("\u0090\u03ae\3\2\2\2\u0092\u03b2\3\2\2\2\u0094\u03b4\3")
        buf.write("\2\2\2\u0096\u03bb\3\2\2\2\u0098\u03c2\3\2\2\2\u009a\u03ca")
        buf.write("\3\2\2\2\u009c\u03d5\3\2\2\2\u009e\u03d7\3\2\2\2\u00a0")
        buf.write("\u03ed\3\2\2\2\u00a2\u03ef\3\2\2\2\u00a4\u03f2\3\2\2\2")
        buf.write("\u00a6\u03fa\3\2\2\2\u00a8\u0402\3\2\2\2\u00aa\u040a\3")
        buf.write("\2\2\2\u00ac\u0412\3\2\2\2\u00ae\u041a\3\2\2\2\u00b0\u0425")
        buf.write("\3\2\2\2\u00b2\u0427\3\2\2\2\u00b4\u042d\3\2\2\2\u00b6")
        buf.write("\u0451\3\2\2\2\u00b8\u0455\3\2\2\2\u00ba\u0472\3\2\2\2")
        buf.write("\u00bc\u0474\3\2\2\2\u00be\u048a\3\2\2\2\u00c0\u048c\3")
        buf.write("\2\2\2\u00c2\u0492\3\2\2\2\u00c4\u04a1\3\2\2\2\u00c6\u04dc")
        buf.write("\3\2\2\2\u00c8\u04de\3\2\2\2\u00ca\u04ea\3\2\2\2\u00cc")
        buf.write("\u0501\3\2\2\2\u00ce\u0505\3\2\2\2\u00d0\u0508\3\2\2\2")
        buf.write("\u00d2\u0511\3\2\2\2\u00d4\u0516\3\2\2\2\u00d6\u0518\3")
        buf.write("\2\2\2\u00d8\u051f\3\2\2\2\u00da\u00dd\7>\2\2\u00db\u00dd")
        buf.write("\5\4\3\2\u00dc\u00da\3\2\2\2\u00dc\u00db\3\2\2\2\u00dd")
        buf.write("\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2")
        buf.write("\u00df\u00e1\3\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e2\7")
        buf.write("\2\2\3\u00e2\3\3\2\2\2\u00e3\u00e7\5\62\32\2\u00e4\u00e7")
        buf.write("\5\64\33\2\u00e5\u00e7\5\6\4\2\u00e6\u00e3\3\2\2\2\u00e6")
        buf.write("\u00e4\3\2\2\2\u00e6\u00e5\3\2\2\2\u00e7\5\3\2\2\2\u00e8")
        buf.write("\u00e9\7\3\2\2\u00e9\u00ea\5\b\5\2\u00ea\7\3\2\2\2\u00eb")
        buf.write("\u00f6\5\n\6\2\u00ec\u00f6\5\16\b\2\u00ed\u00f6\5\f\7")
        buf.write("\2\u00ee\u00f6\5\22\n\2\u00ef\u00f6\5\20\t\2\u00f0\u00f6")
        buf.write("\5\34\17\2\u00f1\u00f6\5\36\20\2\u00f2\u00f6\5\32\16\2")
        buf.write("\u00f3\u00f6\5\26\f\2\u00f4\u00f6\5\30\r\2\u00f5\u00eb")
        buf.write("\3\2\2\2\u00f5\u00ec\3\2\2\2\u00f5\u00ed\3\2\2\2\u00f5")
        buf.write("\u00ee\3\2\2\2\u00f5\u00ef\3\2\2\2\u00f5\u00f0\3\2\2\2")
        buf.write("\u00f5\u00f1\3\2\2\2\u00f5\u00f2\3\2\2\2\u00f5\u00f3\3")
        buf.write("\2\2\2\u00f5\u00f4\3\2\2\2\u00f6\t\3\2\2\2\u00f7\u00fe")
        buf.write("\7\4\2\2\u00f8\u00fd\5 \21\2\u00f9\u00fd\5\"\22\2\u00fa")
        buf.write("\u00fd\5$\23\2\u00fb\u00fd\5*\26\2\u00fc\u00f8\3\2\2\2")
        buf.write("\u00fc\u00f9\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fb\3")
        buf.write("\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff")
        buf.write("\3\2\2\2\u00ff\u0101\3\2\2\2\u0100\u00fe\3\2\2\2\u0101")
        buf.write("\u0102\5\u008eH\2\u0102\13\3\2\2\2\u0103\u0104\7\4\2\2")
        buf.write("\u0104\u010c\7(\2\2\u0105\u010b\5 \21\2\u0106\u010b\5")
        buf.write(",\27\2\u0107\u010b\5\"\22\2\u0108\u010b\5$\23\2\u0109")
        buf.write("\u010b\5*\26\2\u010a\u0105\3\2\2\2\u010a\u0106\3\2\2\2")
        buf.write("\u010a\u0107\3\2\2\2\u010a\u0108\3\2\2\2\u010a\u0109\3")
        buf.write("\2\2\2\u010b\u010e\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d")
        buf.write("\3\2\2\2\u010d\u010f\3\2\2\2\u010e\u010c\3\2\2\2\u010f")
        buf.write("\u0110\5.\30\2\u0110\r\3\2\2\2\u0111\u0113\7(\2\2\u0112")
        buf.write("\u0114\5,\27\2\u0113\u0112\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0116\3\2\2\2\u0115\u0117\5$\23\2\u0116\u0115\3")
        buf.write("\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119")
        buf.write("\5.\30\2\u0119\17\3\2\2\2\u011a\u011b\7\4\2\2\u011b\u011d")
        buf.write("\7\5\2\2\u011c\u011e\5 \21\2\u011d\u011c\3\2\2\2\u011d")
        buf.write("\u011e\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0120\5\60\31")
        buf.write("\2\u0120\21\3\2\2\2\u0121\u0122\7\5\2\2\u0122\u0123\5")
        buf.write("\60\31\2\u0123\23\3\2\2\2\u0124\u0125\7\6\2\2\u0125\u0126")
        buf.write("\5\u008eH\2\u0126\25\3\2\2\2\u0127\u0128\7\7\2\2\u0128")
        buf.write("\u0129\5\u008eH\2\u0129\27\3\2\2\2\u012a\u012b\7\b\2\2")
        buf.write("\u012b\u012c\5\u008eH\2\u012c\31\3\2\2\2\u012d\u012e\7")
        buf.write("\t\2\2\u012e\u012f\5\u008eH\2\u012f\33\3\2\2\2\u0130\u0131")
        buf.write("\7\n\2\2\u0131\u0132\7>\2\2\u0132\35\3\2\2\2\u0133\u0134")
        buf.write("\7\13\2\2\u0134\u0135\7>\2\2\u0135\u0136\7?\2\2\u0136")
        buf.write("\u0137\t\2\2\2\u0137\u0138\5\u00a4S\2\u0138\u0139\7>\2")
        buf.write("\2\u0139\37\3\2\2\2\u013a\u013b\7\f\2\2\u013b\u013c\5")
        buf.write("\u00ccg\2\u013c\u013d\7L\2\2\u013d!\3\2\2\2\u013e\u013f")
        buf.write("\7\r\2\2\u013f\u0144\7?\2\2\u0140\u0141\7M\2\2\u0141\u0143")
        buf.write("\7?\2\2\u0142\u0140\3\2\2\2\u0143\u0146\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0147\3\2\2\2")
        buf.write("\u0146\u0144\3\2\2\2\u0147\u0148\7L\2\2\u0148#\3\2\2\2")
        buf.write("\u0149\u014a\7\16\2\2\u014a\u014f\7?\2\2\u014b\u014c\7")
        buf.write("M\2\2\u014c\u014e\7?\2\2\u014d\u014b\3\2\2\2\u014e\u0151")
        buf.write("\3\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0152\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0153\7L\2\2")
        buf.write("\u0153%\3\2\2\2\u0154\u0155\7\17\2\2\u0155\u0156\7?\2")
        buf.write("\2\u0156\u0157\7L\2\2\u0157\'\3\2\2\2\u0158\u0159\7\20")
        buf.write("\2\2\u0159\u015a\7?\2\2\u015a\u015b\7L\2\2\u015b)\3\2")
        buf.write("\2\2\u015c\u015d\7\21\2\2\u015d\u015e\t\3\2\2\u015e\u015f")
        buf.write("\7N\2\2\u015f\u0164\7?\2\2\u0160\u0161\7M\2\2\u0161\u0163")
        buf.write("\7?\2\2\u0162\u0160\3\2\2\2\u0163\u0166\3\2\2\2\u0164")
        buf.write("\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0167\3\2\2\2")
        buf.write("\u0166\u0164\3\2\2\2\u0167\u0168\7L\2\2\u0168+\3\2\2\2")
        buf.write("\u0169\u016a\7\26\2\2\u016a\u016d\7\27\2\2\u016b\u016c")
        buf.write("\7M\2\2\u016c\u016e\7\31\2\2\u016d\u016b\3\2\2\2\u016d")
        buf.write("\u016e\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170\7L\2\2")
        buf.write("\u0170-\3\2\2\2\u0171\u0172\7>\2\2\u0172\u0173\7y\2\2")
        buf.write("\u0173\u0174\7(\2\2\u0174\u0175\7?\2\2\u0175\u0176\7)")
        buf.write("\2\2\u0176\u0177\7?\2\2\u0177\u0178\7K\2\2\u0178\u017b")
        buf.write("\5\u00ccg\2\u0179\u017a\7M\2\2\u017a\u017c\5\u00ccg\2")
        buf.write("\u017b\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017f\3")
        buf.write("\2\2\2\u017d\u017e\7M\2\2\u017e\u0180\5\u00ccg\2\u017f")
        buf.write("\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\u0182\7L\2\2\u0182\u0183\7N\2\2\u0183\u0184\5\u008e")
        buf.write("H\2\u0184\u0185\7z\2\2\u0185/\3\2\2\2\u0186\u0187\7>\2")
        buf.write("\2\u0187\u0188\7y\2\2\u0188\u0189\5\24\13\2\u0189\u018a")
        buf.write("\7z\2\2\u018a\61\3\2\2\2\u018b\u0190\5N(\2\u018c\u018d")
        buf.write("\7O\2\2\u018d\u018f\5N(\2\u018e\u018c\3\2\2\2\u018f\u0192")
        buf.write("\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191")
        buf.write("\u0194\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0195\7O\2\2")
        buf.write("\u0194\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196\3")
        buf.write("\2\2\2\u0196\u0197\7>\2\2\u0197\63\3\2\2\2\u0198\u01a2")
        buf.write("\5\u0080A\2\u0199\u01a2\5\u0082B\2\u019a\u01a2\5\u0084")
        buf.write("C\2\u019b\u01a2\5\u0086D\2\u019c\u01a2\5\u0088E\2\u019d")
        buf.write("\u01a2\5B\"\2\u019e\u01a2\5\u00c8e\2\u019f\u01a2\5> \2")
        buf.write("\u01a0\u01a2\5~@\2\u01a1\u0198\3\2\2\2\u01a1\u0199\3\2")
        buf.write("\2\2\u01a1\u019a\3\2\2\2\u01a1\u019b\3\2\2\2\u01a1\u019c")
        buf.write("\3\2\2\2\u01a1\u019d\3\2\2\2\u01a1\u019e\3\2\2\2\u01a1")
        buf.write("\u019f\3\2\2\2\u01a1\u01a0\3\2\2\2\u01a2\65\3\2\2\2\u01a3")
        buf.write("\u01a9\7>\2\2\u01a4\u01a9\5\62\32\2\u01a5\u01a6\5\64\33")
        buf.write("\2\u01a6\u01a7\7>\2\2\u01a7\u01a9\3\2\2\2\u01a8\u01a3")
        buf.write("\3\2\2\2\u01a8\u01a4\3\2\2\2\u01a8\u01a5\3\2\2\2\u01a9")
        buf.write("\67\3\2\2\2\u01aa\u01ae\5\u00c4c\2\u01ab\u01ad\7>\2\2")
        buf.write("\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3")
        buf.write("\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ae")
        buf.write("\3\2\2\2\u01b1\u01b2\7\2\2\3\u01b29\3\2\2\2\u01b3\u01b4")
        buf.write("\7h\2\2\u01b4\u01ba\5v<\2\u01b5\u01b7\7K\2\2\u01b6\u01b8")
        buf.write("\5\u00caf\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\u01bb\7L\2\2\u01ba\u01b5\3\2\2\2")
        buf.write("\u01ba\u01bb\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01bd\7")
        buf.write(">\2\2\u01bd;\3\2\2\2\u01be\u01c0\5:\36\2\u01bf\u01be\3")
        buf.write("\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2=\3\2\2\2\u01c3\u01c7\5<\37\2\u01c4\u01c8")
        buf.write("\5\u00c8e\2\u01c5\u01c8\5B\"\2\u01c6\u01c8\5@!\2\u01c7")
        buf.write("\u01c4\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2\2")
        buf.write("\u01c8?\3\2\2\2\u01c9\u01ca\7<\2\2\u01ca\u01cb\5B\"\2")
        buf.write("\u01cbA\3\2\2\2\u01cc\u01cd\7\33\2\2\u01cd\u01ce\7?\2")
        buf.write("\2\u01ce\u01d1\5D#\2\u01cf\u01d0\7i\2\2\u01d0\u01d2\5")
        buf.write("\u0090I\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2")
        buf.write("\u01d3\3\2\2\2\u01d3\u01d4\7N\2\2\u01d4\u01d5\5\u008e")
        buf.write("H\2\u01d5C\3\2\2\2\u01d6\u01d8\7K\2\2\u01d7\u01d9\5F$")
        buf.write("\2\u01d8\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da")
        buf.write("\3\2\2\2\u01da\u01db\7L\2\2\u01dbE\3\2\2\2\u01dc\u01df")
        buf.write("\5H%\2\u01dd\u01de\7Q\2\2\u01de\u01e0\5\u0090I\2\u01df")
        buf.write("\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e9\3\2\2\2")
        buf.write("\u01e1\u01e2\7M\2\2\u01e2\u01e5\5H%\2\u01e3\u01e4\7Q\2")
        buf.write("\2\u01e4\u01e6\5\u0090I\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6")
        buf.write("\3\2\2\2\u01e6\u01e8\3\2\2\2\u01e7\u01e1\3\2\2\2\u01e8")
        buf.write("\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2")
        buf.write("\u01ea\u020d\3\2\2\2\u01eb\u01e9\3\2\2\2\u01ec\u020b\7")
        buf.write("M\2\2\u01ed\u01ef\7J\2\2\u01ee\u01f0\5H%\2\u01ef\u01ee")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f9\3\2\2\2\u01f1")
        buf.write("\u01f2\7M\2\2\u01f2\u01f5\5H%\2\u01f3\u01f4\7Q\2\2\u01f4")
        buf.write("\u01f6\5\u0090I\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2")
        buf.write("\2\2\u01f6\u01f8\3\2\2\2\u01f7\u01f1\3\2\2\2\u01f8\u01fb")
        buf.write("\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\u0204\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u0202\7M\2\2")
        buf.write("\u01fd\u01fe\7P\2\2\u01fe\u0200\5H%\2\u01ff\u0201\7M\2")
        buf.write("\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0203")
        buf.write("\3\2\2\2\u0202\u01fd\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0205\3\2\2\2\u0204\u01fc\3\2\2\2\u0204\u0205\3\2\2\2")
        buf.write("\u0205\u020c\3\2\2\2\u0206\u0207\7P\2\2\u0207\u0209\5")
        buf.write("H%\2\u0208\u020a\7M\2\2\u0209\u0208\3\2\2\2\u0209\u020a")
        buf.write("\3\2\2\2\u020a\u020c\3\2\2\2\u020b\u01ed\3\2\2\2\u020b")
        buf.write("\u0206\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e\3\2\2\2")
        buf.write("\u020d\u01ec\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u022e\3")
        buf.write("\2\2\2\u020f\u0211\7J\2\2\u0210\u0212\5H%\2\u0211\u0210")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u021b\3\2\2\2\u0213")
        buf.write("\u0214\7M\2\2\u0214\u0217\5H%\2\u0215\u0216\7Q\2\2\u0216")
        buf.write("\u0218\5\u0090I\2\u0217\u0215\3\2\2\2\u0217\u0218\3\2")
        buf.write("\2\2\u0218\u021a\3\2\2\2\u0219\u0213\3\2\2\2\u021a\u021d")
        buf.write("\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c")
        buf.write("\u0226\3\2\2\2\u021d\u021b\3\2\2\2\u021e\u0224\7M\2\2")
        buf.write("\u021f\u0220\7P\2\2\u0220\u0222\5H%\2\u0221\u0223\7M\2")
        buf.write("\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225")
        buf.write("\3\2\2\2\u0224\u021f\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("\u0227\3\2\2\2\u0226\u021e\3\2\2\2\u0226\u0227\3\2\2\2")
        buf.write("\u0227\u022e\3\2\2\2\u0228\u0229\7P\2\2\u0229\u022b\5")
        buf.write("H%\2\u022a\u022c\7M\2\2\u022b\u022a\3\2\2\2\u022b\u022c")
        buf.write("\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u01dc\3\2\2\2\u022d")
        buf.write("\u020f\3\2\2\2\u022d\u0228\3\2\2\2\u022eG\3\2\2\2\u022f")
        buf.write("\u0232\7?\2\2\u0230\u0231\7N\2\2\u0231\u0233\5\u0090I")
        buf.write("\2\u0232\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233I\3\2")
        buf.write("\2\2\u0234\u0237\5L\'\2\u0235\u0236\7Q\2\2\u0236\u0238")
        buf.write("\5\u0090I\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2\u0238")
        buf.write("\u0241\3\2\2\2\u0239\u023a\7M\2\2\u023a\u023d\5L\'\2\u023b")
        buf.write("\u023c\7Q\2\2\u023c\u023e\5\u0090I\2\u023d\u023b\3\2\2")
        buf.write("\2\u023d\u023e\3\2\2\2\u023e\u0240\3\2\2\2\u023f\u0239")
        buf.write("\3\2\2\2\u0240\u0243\3\2\2\2\u0241\u023f\3\2\2\2\u0241")
        buf.write("\u0242\3\2\2\2\u0242\u0265\3\2\2\2\u0243\u0241\3\2\2\2")
        buf.write("\u0244\u0263\7M\2\2\u0245\u0247\7J\2\2\u0246\u0248\5L")
        buf.write("\'\2\u0247\u0246\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0251")
        buf.write("\3\2\2\2\u0249\u024a\7M\2\2\u024a\u024d\5L\'\2\u024b\u024c")
        buf.write("\7Q\2\2\u024c\u024e\5\u0090I\2\u024d\u024b\3\2\2\2\u024d")
        buf.write("\u024e\3\2\2\2\u024e\u0250\3\2\2\2\u024f\u0249\3\2\2\2")
        buf.write("\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3")
        buf.write("\2\2\2\u0252\u025c\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u025a")
        buf.write("\7M\2\2\u0255\u0256\7P\2\2\u0256\u0258\5L\'\2\u0257\u0259")
        buf.write("\7M\2\2\u0258\u0257\3\2\2\2\u0258\u0259\3\2\2\2\u0259")
        buf.write("\u025b\3\2\2\2\u025a\u0255\3\2\2\2\u025a\u025b\3\2\2\2")
        buf.write("\u025b\u025d\3\2\2\2\u025c\u0254\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u0264\3\2\2\2\u025e\u025f\7P\2\2\u025f\u0261")
        buf.write("\5L\'\2\u0260\u0262\7M\2\2\u0261\u0260\3\2\2\2\u0261\u0262")
        buf.write("\3\2\2\2\u0262\u0264\3\2\2\2\u0263\u0245\3\2\2\2\u0263")
        buf.write("\u025e\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0266\3\2\2\2")
        buf.write("\u0265\u0244\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0286\3")
        buf.write("\2\2\2\u0267\u0269\7J\2\2\u0268\u026a\5L\'\2\u0269\u0268")
        buf.write("\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u0273\3\2\2\2\u026b")
        buf.write("\u026c\7M\2\2\u026c\u026f\5L\'\2\u026d\u026e\7Q\2\2\u026e")
        buf.write("\u0270\5\u0090I\2\u026f\u026d\3\2\2\2\u026f\u0270\3\2")
        buf.write("\2\2\u0270\u0272\3\2\2\2\u0271\u026b\3\2\2\2\u0272\u0275")
        buf.write("\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("\u027e\3\2\2\2\u0275\u0273\3\2\2\2\u0276\u027c\7M\2\2")
        buf.write("\u0277\u0278\7P\2\2\u0278\u027a\5L\'\2\u0279\u027b\7M")
        buf.write("\2\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027d")
        buf.write("\3\2\2\2\u027c\u0277\3\2\2\2\u027c\u027d\3\2\2\2\u027d")
        buf.write("\u027f\3\2\2\2\u027e\u0276\3\2\2\2\u027e\u027f\3\2\2\2")
        buf.write("\u027f\u0286\3\2\2\2\u0280\u0281\7P\2\2\u0281\u0283\5")
        buf.write("L\'\2\u0282\u0284\7M\2\2\u0283\u0282\3\2\2\2\u0283\u0284")
        buf.write("\3\2\2\2\u0284\u0286\3\2\2\2\u0285\u0234\3\2\2\2\u0285")
        buf.write("\u0267\3\2\2\2\u0285\u0280\3\2\2\2\u0286K\3\2\2\2\u0287")
        buf.write("\u0288\7?\2\2\u0288M\3\2\2\2\u0289\u0292\5P)\2\u028a\u0292")
        buf.write("\5X-\2\u028b\u0292\5Z.\2\u028c\u0292\5\\/\2\u028d\u0292")
        buf.write("\5h\65\2\u028e\u0292\5x=\2\u028f\u0292\5z>\2\u0290\u0292")
        buf.write("\5|?\2\u0291\u0289\3\2\2\2\u0291\u028a\3\2\2\2\u0291\u028b")
        buf.write("\3\2\2\2\u0291\u028c\3\2\2\2\u0291\u028d\3\2\2\2\u0291")
        buf.write("\u028e\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0290\3\2\2\2")
        buf.write("\u0292O\3\2\2\2\u0293\u02a4\5T+\2\u0294\u02a5\5R*\2\u0295")
        buf.write("\u0298\5V,\2\u0296\u0299\5\u00d6l\2\u0297\u0299\5\u00c4")
        buf.write("c\2\u0298\u0296\3\2\2\2\u0298\u0297\3\2\2\2\u0299\u02a5")
        buf.write("\3\2\2\2\u029a\u029d\7Q\2\2\u029b\u029e\5\u00d6l\2\u029c")
        buf.write("\u029e\5T+\2\u029d\u029b\3\2\2\2\u029d\u029c\3\2\2\2\u029e")
        buf.write("\u02a0\3\2\2\2\u029f\u029a\3\2\2\2\u02a0\u02a3\3\2\2\2")
        buf.write("\u02a1\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a5\3")
        buf.write("\2\2\2\u02a3\u02a1\3\2\2\2\u02a4\u0294\3\2\2\2\u02a4\u0295")
        buf.write("\3\2\2\2\u02a4\u02a1\3\2\2\2\u02a5Q\3\2\2\2\u02a6\u02a7")
        buf.write("\7N\2\2\u02a7\u02aa\5\u0090I\2\u02a8\u02a9\7Q\2\2\u02a9")
        buf.write("\u02ab\5\u0090I\2\u02aa\u02a8\3\2\2\2\u02aa\u02ab\3\2")
        buf.write("\2\2\u02abS\3\2\2\2\u02ac\u02af\5\u0090I\2\u02ad\u02af")
        buf.write("\5\u00a2R\2\u02ae\u02ac\3\2\2\2\u02ae\u02ad\3\2\2\2\u02af")
        buf.write("\u02b7\3\2\2\2\u02b0\u02b3\7M\2\2\u02b1\u02b4\5\u0090")
        buf.write("I\2\u02b2\u02b4\5\u00a2R\2\u02b3\u02b1\3\2\2\2\u02b3\u02b2")
        buf.write("\3\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02b0\3\2\2\2\u02b6")
        buf.write("\u02b9\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2")
        buf.write("\u02b8\u02bb\3\2\2\2\u02b9\u02b7\3\2\2\2\u02ba\u02bc\7")
        buf.write("M\2\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bcU\3")
        buf.write("\2\2\2\u02bd\u02be\t\4\2\2\u02beW\3\2\2\2\u02bf\u02c0")
        buf.write("\78\2\2\u02c0\u02c1\5\u00c2b\2\u02c1Y\3\2\2\2\u02c2\u02c3")
        buf.write("\79\2\2\u02c3[\3\2\2\2\u02c4\u02ca\5^\60\2\u02c5\u02ca")
        buf.write("\5`\61\2\u02c6\u02ca\5b\62\2\u02c7\u02ca\5f\64\2\u02c8")
        buf.write("\u02ca\5d\63\2\u02c9\u02c4\3\2\2\2\u02c9\u02c5\3\2\2\2")
        buf.write("\u02c9\u02c6\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02c8\3")
        buf.write("\2\2\2\u02ca]\3\2\2\2\u02cb\u02cc\7;\2\2\u02cc_\3\2\2")
        buf.write("\2\u02cd\u02ce\7:\2\2\u02cea\3\2\2\2\u02cf\u02d1\7\34")
        buf.write("\2\2\u02d0\u02d2\5\u00c4c\2\u02d1\u02d0\3\2\2\2\u02d1")
        buf.write("\u02d2\3\2\2\2\u02d2c\3\2\2\2\u02d3\u02d4\5\u00d6l\2\u02d4")
        buf.write("e\3\2\2\2\u02d5\u02db\7\35\2\2\u02d6\u02d9\5\u0090I\2")
        buf.write("\u02d7\u02d8\7\36\2\2\u02d8\u02da\5\u0090I\2\u02d9\u02d7")
        buf.write("\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02dc\3\2\2\2\u02db")
        buf.write("\u02d6\3\2\2\2\u02db\u02dc\3\2\2\2\u02dcg\3\2\2\2\u02dd")
        buf.write("\u02e0\5j\66\2\u02de\u02e0\5l\67\2\u02df\u02dd\3\2\2\2")
        buf.write("\u02df\u02de\3\2\2\2\u02e0i\3\2\2\2\u02e1\u02e2\7\37\2")
        buf.write("\2\u02e2\u02e3\5t;\2\u02e3k\3\2\2\2\u02e4\u02f1\7\36\2")
        buf.write("\2\u02e5\u02e7\t\5\2\2\u02e6\u02e5\3\2\2\2\u02e7\u02ea")
        buf.write("\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9")
        buf.write("\u02eb\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb\u02f2\5v<\2\u02ec")
        buf.write("\u02ee\t\5\2\2\u02ed\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2")
        buf.write("\u02ef\u02ed\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f2\3")
        buf.write("\2\2\2\u02f1\u02e8\3\2\2\2\u02f1\u02ed\3\2\2\2\u02f2\u02f3")
        buf.write("\3\2\2\2\u02f3\u02fa\7\37\2\2\u02f4\u02fb\7J\2\2\u02f5")
        buf.write("\u02f6\7K\2\2\u02f6\u02f7\5r:\2\u02f7\u02f8\7L\2\2\u02f8")
        buf.write("\u02fb\3\2\2\2\u02f9\u02fb\5r:\2\u02fa\u02f4\3\2\2\2\u02fa")
        buf.write("\u02f5\3\2\2\2\u02fa\u02f9\3\2\2\2\u02fbm\3\2\2\2\u02fc")
        buf.write("\u02ff\7?\2\2\u02fd\u02fe\7 \2\2\u02fe\u0300\7?\2\2\u02ff")
        buf.write("\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2\u0300o\3\2\2\2\u0301")
        buf.write("\u0304\5v<\2\u0302\u0303\7 \2\2\u0303\u0305\7?\2\2\u0304")
        buf.write("\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305q\3\2\2\2\u0306")
        buf.write("\u030b\5n8\2\u0307\u0308\7M\2\2\u0308\u030a\5n8\2\u0309")
        buf.write("\u0307\3\2\2\2\u030a\u030d\3\2\2\2\u030b\u0309\3\2\2\2")
        buf.write("\u030b\u030c\3\2\2\2\u030c\u030f\3\2\2\2\u030d\u030b\3")
        buf.write("\2\2\2\u030e\u0310\7M\2\2\u030f\u030e\3\2\2\2\u030f\u0310")
        buf.write("\3\2\2\2\u0310s\3\2\2\2\u0311\u0316\5p9\2\u0312\u0313")
        buf.write("\7M\2\2\u0313\u0315\5p9\2\u0314\u0312\3\2\2\2\u0315\u0318")
        buf.write("\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317")
        buf.write("u\3\2\2\2\u0318\u0316\3\2\2\2\u0319\u031e\7?\2\2\u031a")
        buf.write("\u031b\7H\2\2\u031b\u031d\7?\2\2\u031c\u031a\3\2\2\2\u031d")
        buf.write("\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f\3\2\2\2")
        buf.write("\u031fw\3\2\2\2\u0320\u031e\3\2\2\2\u0321\u0322\7!\2\2")
        buf.write("\u0322\u0327\7?\2\2\u0323\u0324\7M\2\2\u0324\u0326\7?")
        buf.write("\2\2\u0325\u0323\3\2\2\2\u0326\u0329\3\2\2\2\u0327\u0325")
        buf.write("\3\2\2\2\u0327\u0328\3\2\2\2\u0328y\3\2\2\2\u0329\u0327")
        buf.write("\3\2\2\2\u032a\u032b\7\"\2\2\u032b\u0330\7?\2\2\u032c")
        buf.write("\u032d\7M\2\2\u032d\u032f\7?\2\2\u032e\u032c\3\2\2\2\u032f")
        buf.write("\u0332\3\2\2\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2")
        buf.write("\u0331{\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0334\7#\2\2")
        buf.write("\u0334\u0337\5\u0090I\2\u0335\u0336\7M\2\2\u0336\u0338")
        buf.write("\5\u0090I\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338")
        buf.write("}\3\2\2\2\u0339\u033d\7<\2\2\u033a\u033e\5B\"\2\u033b")
        buf.write("\u033e\5\u0088E\2\u033c\u033e\5\u0084C\2\u033d\u033a\3")
        buf.write("\2\2\2\u033d\u033b\3\2\2\2\u033d\u033c\3\2\2\2\u033e\177")
        buf.write("\3\2\2\2\u033f\u0340\7$\2\2\u0340\u0341\5\u0090I\2\u0341")
        buf.write("\u0342\7N\2\2\u0342\u034a\5\u008eH\2\u0343\u0344\7%\2")
        buf.write("\2\u0344\u0345\5\u0090I\2\u0345\u0346\7N\2\2\u0346\u0347")
        buf.write("\5\u008eH\2\u0347\u0349\3\2\2\2\u0348\u0343\3\2\2\2\u0349")
        buf.write("\u034c\3\2\2\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write("\u034b\u0350\3\2\2\2\u034c\u034a\3\2\2\2\u034d\u034e\7")
        buf.write("&\2\2\u034e\u034f\7N\2\2\u034f\u0351\5\u008eH\2\u0350")
        buf.write("\u034d\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0081\3\2\2\2")
        buf.write("\u0352\u0353\7\'\2\2\u0353\u0354\5\u0090I\2\u0354\u0355")
        buf.write("\7N\2\2\u0355\u0359\5\u008eH\2\u0356\u0357\7&\2\2\u0357")
        buf.write("\u0358\7N\2\2\u0358\u035a\5\u008eH\2\u0359\u0356\3\2\2")
        buf.write("\2\u0359\u035a\3\2\2\2\u035a\u0083\3\2\2\2\u035b\u035c")
        buf.write("\7(\2\2\u035c\u035d\5\u00c2b\2\u035d\u035e\7)\2\2\u035e")
        buf.write("\u035f\5\u00c4c\2\u035f\u0360\7N\2\2\u0360\u0364\5\u008e")
        buf.write("H\2\u0361\u0362\7&\2\2\u0362\u0363\7N\2\2\u0363\u0365")
        buf.write("\5\u008eH\2\u0364\u0361\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write("\u0085\3\2\2\2\u0366\u0367\7*\2\2\u0367\u0368\7N\2\2\u0368")
        buf.write("\u037e\5\u008eH\2\u0369\u036a\5\u008cG\2\u036a\u036b\7")
        buf.write("N\2\2\u036b\u036c\5\u008eH\2\u036c\u036e\3\2\2\2\u036d")
        buf.write("\u0369\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u036d\3\2\2\2")
        buf.write("\u036f\u0370\3\2\2\2\u0370\u0374\3\2\2\2\u0371\u0372\7")
        buf.write("&\2\2\u0372\u0373\7N\2\2\u0373\u0375\5\u008eH\2\u0374")
        buf.write("\u0371\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0379\3\2\2\2")
        buf.write("\u0376\u0377\7+\2\2\u0377\u0378\7N\2\2\u0378\u037a\5\u008e")
        buf.write("H\2\u0379\u0376\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037f")
        buf.write("\3\2\2\2\u037b\u037c\7+\2\2\u037c\u037d\7N\2\2\u037d\u037f")
        buf.write("\5\u008eH\2\u037e\u036d\3\2\2\2\u037e\u037b\3\2\2\2\u037f")
        buf.write("\u0087\3\2\2\2\u0380\u0381\7,\2\2\u0381\u0386\5\u008a")
        buf.write("F\2\u0382\u0383\7M\2\2\u0383\u0385\5\u008aF\2\u0384\u0382")
        buf.write("\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388\u0386\3\2\2\2")
        buf.write("\u0389\u038a\7N\2\2\u038a\u038b\5\u008eH\2\u038b\u0089")
        buf.write("\3\2\2\2\u038c\u038f\5\u0090I\2\u038d\u038e\7 \2\2\u038e")
        buf.write("\u0390\5\u00a4S\2\u038f\u038d\3\2\2\2\u038f\u0390\3\2")
        buf.write("\2\2\u0390\u008b\3\2\2\2\u0391\u0397\7-\2\2\u0392\u0395")
        buf.write("\5\u0090I\2\u0393\u0394\7 \2\2\u0394\u0396\7?\2\2\u0395")
        buf.write("\u0393\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2")
        buf.write("\u0397\u0392\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u008d\3")
        buf.write("\2\2\2\u0399\u03a4\5\62\32\2\u039a\u039b\7>\2\2\u039b")
        buf.write("\u039d\7y\2\2\u039c\u039e\5\4\3\2\u039d\u039c\3\2\2\2")
        buf.write("\u039e\u039f\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3")
        buf.write("\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\7z\2\2\u03a2\u03a4")
        buf.write("\3\2\2\2\u03a3\u0399\3\2\2\2\u03a3\u039a\3\2\2\2\u03a4")
        buf.write("\u008f\3\2\2\2\u03a5\u03ab\5\u0098M\2\u03a6\u03a7\7$\2")
        buf.write("\2\u03a7\u03a8\5\u0098M\2\u03a8\u03a9\7&\2\2\u03a9\u03aa")
        buf.write("\5\u0090I\2\u03aa\u03ac\3\2\2\2\u03ab\u03a6\3\2\2\2\u03ab")
        buf.write("\u03ac\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03af\5\u0094")
        buf.write("K\2\u03ae\u03a5\3\2\2\2\u03ae\u03ad\3\2\2\2\u03af\u0091")
        buf.write("\3\2\2\2\u03b0\u03b3\5\u0098M\2\u03b1\u03b3\5\u0096L\2")
        buf.write("\u03b2\u03b0\3\2\2\2\u03b2\u03b1\3\2\2\2\u03b3\u0093\3")
        buf.write("\2\2\2\u03b4\u03b6\7.\2\2\u03b5\u03b7\5J&\2\u03b6\u03b5")
        buf.write("\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8")
        buf.write("\u03b9\7N\2\2\u03b9\u03ba\5\u0090I\2\u03ba\u0095\3\2\2")
        buf.write("\2\u03bb\u03bd\7.\2\2\u03bc\u03be\5J&\2\u03bd\u03bc\3")
        buf.write("\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c0")
        buf.write("\7N\2\2\u03c0\u03c1\5\u0092J\2\u03c1\u0097\3\2\2\2\u03c2")
        buf.write("\u03c7\5\u009aN\2\u03c3\u03c4\7/\2\2\u03c4\u03c6\5\u009a")
        buf.write("N\2\u03c5\u03c3\3\2\2\2\u03c6\u03c9\3\2\2\2\u03c7\u03c5")
        buf.write("\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u0099\3\2\2\2\u03c9")
        buf.write("\u03c7\3\2\2\2\u03ca\u03cf\5\u009cO\2\u03cb\u03cc\7\60")
        buf.write("\2\2\u03cc\u03ce\5\u009cO\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u009b\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2\u03d3\7")
        buf.write("\61\2\2\u03d3\u03d6\5\u009cO\2\u03d4\u03d6\5\u009eP\2")
        buf.write("\u03d5\u03d2\3\2\2\2\u03d5\u03d4\3\2\2\2\u03d6\u009d\3")
        buf.write("\2\2\2\u03d7\u03dd\5\u00a4S\2\u03d8\u03d9\5\u00a0Q\2\u03d9")
        buf.write("\u03da\5\u00a4S\2\u03da\u03dc\3\2\2\2\u03db\u03d8\3\2")
        buf.write("\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de")
        buf.write("\3\2\2\2\u03de\u009f\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0")
        buf.write("\u03ee\7a\2\2\u03e1\u03ee\7b\2\2\u03e2\u03ee\7c\2\2\u03e3")
        buf.write("\u03ee\7d\2\2\u03e4\u03ee\7e\2\2\u03e5\u03ee\7f\2\2\u03e6")
        buf.write("\u03ee\7g\2\2\u03e7\u03ee\7)\2\2\u03e8\u03e9\7\61\2\2")
        buf.write("\u03e9\u03ee\7)\2\2\u03ea\u03ee\7\62\2\2\u03eb\u03ec\7")
        buf.write("\62\2\2\u03ec\u03ee\7\61\2\2\u03ed\u03e0\3\2\2\2\u03ed")
        buf.write("\u03e1\3\2\2\2\u03ed\u03e2\3\2\2\2\u03ed\u03e3\3\2\2\2")
        buf.write("\u03ed\u03e4\3\2\2\2\u03ed\u03e5\3\2\2\2\u03ed\u03e6\3")
        buf.write("\2\2\2\u03ed\u03e7\3\2\2\2\u03ed\u03e8\3\2\2\2\u03ed\u03ea")
        buf.write("\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u00a1\3\2\2\2\u03ef")
        buf.write("\u03f0\7J\2\2\u03f0\u03f1\5\u00a4S\2\u03f1\u00a3\3\2\2")
        buf.write("\2\u03f2\u03f7\5\u00a6T\2\u03f3\u03f4\7T\2\2\u03f4\u03f6")
        buf.write("\5\u00a6T\2\u03f5\u03f3\3\2\2\2\u03f6\u03f9\3\2\2\2\u03f7")
        buf.write("\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u00a5\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03fa\u03ff\5\u00a8U\2\u03fb\u03fc")
        buf.write("\7U\2\2\u03fc\u03fe\5\u00a8U\2\u03fd\u03fb\3\2\2\2\u03fe")
        buf.write("\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2")
        buf.write("\u0400\u00a7\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0407\5")
        buf.write("\u00aaV\2\u0403\u0404\7V\2\2\u0404\u0406\5\u00aaV\2\u0405")
        buf.write("\u0403\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405\3\2\2\2")
        buf.write("\u0407\u0408\3\2\2\2\u0408\u00a9\3\2\2\2\u0409\u0407\3")
        buf.write("\2\2\2\u040a\u040f\5\u00acW\2\u040b\u040c\t\6\2\2\u040c")
        buf.write("\u040e\5\u00acW\2\u040d\u040b\3\2\2\2\u040e\u0411\3\2")
        buf.write("\2\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u00ab")
        buf.write("\3\2\2\2\u0411\u040f\3\2\2\2\u0412\u0417\5\u00aeX\2\u0413")
        buf.write("\u0414\t\7\2\2\u0414\u0416\5\u00aeX\2\u0415\u0413\3\2")
        buf.write("\2\2\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0417\u0418")
        buf.write("\3\2\2\2\u0418\u00ad\3\2\2\2\u0419\u0417\3\2\2\2\u041a")
        buf.write("\u041f\5\u00b0Y\2\u041b\u041c\t\b\2\2\u041c\u041e\5\u00b0")
        buf.write("Y\2\u041d\u041b\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d")
        buf.write("\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u00af\3\2\2\2\u0421")
        buf.write("\u041f\3\2\2\2\u0422\u0423\t\t\2\2\u0423\u0426\5\u00b0")
        buf.write("Y\2\u0424\u0426\5\u00b2Z\2\u0425\u0422\3\2\2\2\u0425\u0424")
        buf.write("\3\2\2\2\u0426\u00b1\3\2\2\2\u0427\u042a\5\u00b4[\2\u0428")
        buf.write("\u0429\7P\2\2\u0429\u042b\5\u00b0Y\2\u042a\u0428\3\2\2")
        buf.write("\2\u042a\u042b\3\2\2\2\u042b\u00b3\3\2\2\2\u042c\u042e")
        buf.write("\7=\2\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2\2\2\u042e")
        buf.write("\u042f\3\2\2\2\u042f\u0433\5\u00b6\\\2\u0430\u0432\5\u00ba")
        buf.write("^\2\u0431\u0430\3\2\2\2\u0432\u0435\3\2\2\2\u0433\u0431")
        buf.write("\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u00b5\3\2\2\2\u0435")
        buf.write("\u0433\3\2\2\2\u0436\u0439\7K\2\2\u0437\u043a\5\u00d6")
        buf.write("l\2\u0438\u043a\5\u00b8]\2\u0439\u0437\3\2\2\2\u0439\u0438")
        buf.write("\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("\u0452\7L\2\2\u043c\u043e\7R\2\2\u043d\u043f\5\u00b8]")
        buf.write("\2\u043e\u043d\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0440")
        buf.write("\3\2\2\2\u0440\u0452\7S\2\2\u0441\u0443\7_\2\2\u0442\u0444")
        buf.write("\5\u00c6d\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445\u0452\7`\2\2\u0446\u0452\7?\2\2\u0447")
        buf.write("\u0452\7\31\2\2\u0448\u044a\7\30\2\2\u0449\u0448\3\2\2")
        buf.write("\2\u044a\u044b\3\2\2\2\u044b\u0449\3\2\2\2\u044b\u044c")
        buf.write("\3\2\2\2\u044c\u0452\3\2\2\2\u044d\u0452\7I\2\2\u044e")
        buf.write("\u0452\7\63\2\2\u044f\u0452\7\64\2\2\u0450\u0452\7\65")
        buf.write("\2\2\u0451\u0436\3\2\2\2\u0451\u043c\3\2\2\2\u0451\u0441")
        buf.write("\3\2\2\2\u0451\u0446\3\2\2\2\u0451\u0447\3\2\2\2\u0451")
        buf.write("\u0449\3\2\2\2\u0451\u044d\3\2\2\2\u0451\u044e\3\2\2\2")
        buf.write("\u0451\u044f\3\2\2\2\u0451\u0450\3\2\2\2\u0452\u00b7\3")
        buf.write("\2\2\2\u0453\u0456\5\u0090I\2\u0454\u0456\5\u00a2R\2\u0455")
        buf.write("\u0453\3\2\2\2\u0455\u0454\3\2\2\2\u0456\u0465\3\2\2\2")
        buf.write("\u0457\u0466\5\u00d0i\2\u0458\u045b\7M\2\2\u0459\u045c")
        buf.write("\5\u0090I\2\u045a\u045c\5\u00a2R\2\u045b\u0459\3\2\2\2")
        buf.write("\u045b\u045a\3\2\2\2\u045c\u045e\3\2\2\2\u045d\u0458\3")
        buf.write("\2\2\2\u045e\u0461\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460")
        buf.write("\3\2\2\2\u0460\u0463\3\2\2\2\u0461\u045f\3\2\2\2\u0462")
        buf.write("\u0464\7M\2\2\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2")
        buf.write("\u0464\u0466\3\2\2\2\u0465\u0457\3\2\2\2\u0465\u045f\3")
        buf.write("\2\2\2\u0466\u00b9\3\2\2\2\u0467\u0469\7K\2\2\u0468\u046a")
        buf.write("\5\u00caf\2\u0469\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u046b\3\2\2\2\u046b\u0473\7L\2\2\u046c\u046d\7R\2\2\u046d")
        buf.write("\u046e\5\u00bc_\2\u046e\u046f\7S\2\2\u046f\u0473\3\2\2")
        buf.write("\2\u0470\u0471\7H\2\2\u0471\u0473\7?\2\2\u0472\u0467\3")
        buf.write("\2\2\2\u0472\u046c\3\2\2\2\u0472\u0470\3\2\2\2\u0473\u00bb")
        buf.write("\3\2\2\2\u0474\u0479\5\u00be`\2\u0475\u0476\7M\2\2\u0476")
        buf.write("\u0478\5\u00be`\2\u0477\u0475\3\2\2\2\u0478\u047b\3\2")
        buf.write("\2\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047d")
        buf.write("\3\2\2\2\u047b\u0479\3\2\2\2\u047c\u047e\7M\2\2\u047d")
        buf.write("\u047c\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u00bd\3\2\2\2")
        buf.write("\u047f\u048b\5\u0090I\2\u0480\u0482\5\u0090I\2\u0481\u0480")
        buf.write("\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0483\3\2\2\2\u0483")
        buf.write("\u0485\7N\2\2\u0484\u0486\5\u0090I\2\u0485\u0484\3\2\2")
        buf.write("\2\u0485\u0486\3\2\2\2\u0486\u0488\3\2\2\2\u0487\u0489")
        buf.write("\5\u00c0a\2\u0488\u0487\3\2\2\2\u0488\u0489\3\2\2\2\u0489")
        buf.write("\u048b\3\2\2\2\u048a\u047f\3\2\2\2\u048a\u0481\3\2\2\2")
        buf.write("\u048b\u00bf\3\2\2\2\u048c\u048e\7N\2\2\u048d\u048f\5")
        buf.write("\u0090I\2\u048e\u048d\3\2\2\2\u048e\u048f\3\2\2\2\u048f")
        buf.write("\u00c1\3\2\2\2\u0490\u0493\5\u00a4S\2\u0491\u0493\5\u00a2")
        buf.write("R\2\u0492\u0490\3\2\2\2\u0492\u0491\3\2\2\2\u0493\u049b")
        buf.write("\3\2\2\2\u0494\u0497\7M\2\2\u0495\u0498\5\u00a4S\2\u0496")
        buf.write("\u0498\5\u00a2R\2\u0497\u0495\3\2\2\2\u0497\u0496\3\2")
        buf.write("\2\2\u0498\u049a\3\2\2\2\u0499\u0494\3\2\2\2\u049a\u049d")
        buf.write("\3\2\2\2\u049b\u0499\3\2\2\2\u049b\u049c\3\2\2\2\u049c")
        buf.write("\u049f\3\2\2\2\u049d\u049b\3\2\2\2\u049e\u04a0\7M\2\2")
        buf.write("\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u00c3\3")
        buf.write("\2\2\2\u04a1\u04a6\5\u0090I\2\u04a2\u04a3\7M\2\2\u04a3")
        buf.write("\u04a5\5\u0090I\2\u04a4\u04a2\3\2\2\2\u04a5\u04a8\3\2")
        buf.write("\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04aa")
        buf.write("\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a9\u04ab\7M\2\2\u04aa")
        buf.write("\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u00c5\3\2\2\2")
        buf.write("\u04ac\u04ad\5\u0090I\2\u04ad\u04ae\7N\2\2\u04ae\u04af")
        buf.write("\5\u0090I\2\u04af\u04b3\3\2\2\2\u04b0\u04b1\7P\2\2\u04b1")
        buf.write("\u04b3\5\u00a4S\2\u04b2\u04ac\3\2\2\2\u04b2\u04b0\3\2")
        buf.write("\2\2\u04b3\u04c6\3\2\2\2\u04b4\u04c7\5\u00d0i\2\u04b5")
        buf.write("\u04bc\7M\2\2\u04b6\u04b7\5\u0090I\2\u04b7\u04b8\7N\2")
        buf.write("\2\u04b8\u04b9\5\u0090I\2\u04b9\u04bd\3\2\2\2\u04ba\u04bb")
        buf.write("\7P\2\2\u04bb\u04bd\5\u00a4S\2\u04bc\u04b6\3\2\2\2\u04bc")
        buf.write("\u04ba\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04b5\3\2\2\2")
        buf.write("\u04bf\u04c2\3\2\2\2\u04c0\u04be\3\2\2\2\u04c0\u04c1\3")
        buf.write("\2\2\2\u04c1\u04c4\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c3\u04c5")
        buf.write("\7M\2\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5")
        buf.write("\u04c7\3\2\2\2\u04c6\u04b4\3\2\2\2\u04c6\u04c0\3\2\2\2")
        buf.write("\u04c7\u04dd\3\2\2\2\u04c8\u04cb\5\u0090I\2\u04c9\u04cb")
        buf.write("\5\u00a2R\2\u04ca\u04c8\3\2\2\2\u04ca\u04c9\3\2\2\2\u04cb")
        buf.write("\u04da\3\2\2\2\u04cc\u04db\5\u00d0i\2\u04cd\u04d0\7M\2")
        buf.write("\2\u04ce\u04d1\5\u0090I\2\u04cf\u04d1\5\u00a2R\2\u04d0")
        buf.write("\u04ce\3\2\2\2\u04d0\u04cf\3\2\2\2\u04d1\u04d3\3\2\2\2")
        buf.write("\u04d2\u04cd\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d2\3")
        buf.write("\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d8\3\2\2\2\u04d6\u04d4")
        buf.write("\3\2\2\2\u04d7\u04d9\7M\2\2\u04d8\u04d7\3\2\2\2\u04d8")
        buf.write("\u04d9\3\2\2\2\u04d9\u04db\3\2\2\2\u04da\u04cc\3\2\2\2")
        buf.write("\u04da\u04d4\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04b2\3")
        buf.write("\2\2\2\u04dc\u04ca\3\2\2\2\u04dd\u00c7\3\2\2\2\u04de\u04df")
        buf.write("\7\66\2\2\u04df\u04e5\7?\2\2\u04e0\u04e2\7K\2\2\u04e1")
        buf.write("\u04e3\5\u00caf\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2")
        buf.write("\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e6\7L\2\2\u04e5\u04e0")
        buf.write("\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7")
        buf.write("\u04e8\7N\2\2\u04e8\u04e9\5\u008eH\2\u04e9\u00c9\3\2\2")
        buf.write("\2\u04ea\u04ef\5\u00ccg\2\u04eb\u04ec\7M\2\2\u04ec\u04ee")
        buf.write("\5\u00ccg\2\u04ed\u04eb\3\2\2\2\u04ee\u04f1\3\2\2\2\u04ef")
        buf.write("\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f3\3\2\2\2")
        buf.write("\u04f1\u04ef\3\2\2\2\u04f2\u04f4\7M\2\2\u04f3\u04f2\3")
        buf.write("\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u00cb\3\2\2\2\u04f5\u04f7")
        buf.write("\5\u0090I\2\u04f6\u04f8\5\u00d0i\2\u04f7\u04f6\3\2\2\2")
        buf.write("\u04f7\u04f8\3\2\2\2\u04f8\u0502\3\2\2\2\u04f9\u04fa\5")
        buf.write("\u0090I\2\u04fa\u04fb\7Q\2\2\u04fb\u04fc\5\u0090I\2\u04fc")
        buf.write("\u0502\3\2\2\2\u04fd\u04fe\7P\2\2\u04fe\u0502\5\u0090")
        buf.write("I\2\u04ff\u0500\7J\2\2\u0500\u0502\5\u0090I\2\u0501\u04f5")
        buf.write("\3\2\2\2\u0501\u04f9\3\2\2\2\u0501\u04fd\3\2\2\2\u0501")
        buf.write("\u04ff\3\2\2\2\u0502\u00cd\3\2\2\2\u0503\u0506\5\u00d0")
        buf.write("i\2\u0504\u0506\5\u00d2j\2\u0505\u0503\3\2\2\2\u0505\u0504")
        buf.write("\3\2\2\2\u0506\u00cf\3\2\2\2\u0507\u0509\7<\2\2\u0508")
        buf.write("\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050a\3\2\2\2")
        buf.write("\u050a\u050b\7(\2\2\u050b\u050c\5\u00c2b\2\u050c\u050d")
        buf.write("\7)\2\2\u050d\u050f\5\u0098M\2\u050e\u0510\5\u00ceh\2")
        buf.write("\u050f\u050e\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u00d1\3")
        buf.write("\2\2\2\u0511\u0512\7$\2\2\u0512\u0514\5\u0092J\2\u0513")
        buf.write("\u0515\5\u00ceh\2\u0514\u0513\3\2\2\2\u0514\u0515\3\2")
        buf.write("\2\2\u0515\u00d3\3\2\2\2\u0516\u0517\7?\2\2\u0517\u00d5")
        buf.write("\3\2\2\2\u0518\u051a\7\67\2\2\u0519\u051b\5\u00d8m\2\u051a")
        buf.write("\u0519\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u00d7\3\2\2\2")
        buf.write("\u051c\u051d\7\36\2\2\u051d\u0520\5\u0090I\2\u051e\u0520")
        buf.write("\5\u00c4c\2\u051f\u051c\3\2\2\2\u051f\u051e\3\2\2\2\u0520")
        buf.write("\u00d9\3\2\2\2\u00b6\u00dc\u00de\u00e6\u00f5\u00fc\u00fe")
        buf.write("\u010a\u010c\u0113\u0116\u011d\u0144\u014f\u0164\u016d")
        buf.write("\u017b\u017f\u0190\u0194\u01a1\u01a8\u01ae\u01b7\u01ba")
        buf.write("\u01c1\u01c7\u01d1\u01d8\u01df\u01e5\u01e9\u01ef\u01f5")
        buf.write("\u01f9\u0200\u0202\u0204\u0209\u020b\u020d\u0211\u0217")
        buf.write("\u021b\u0222\u0224\u0226\u022b\u022d\u0232\u0237\u023d")
        buf.write("\u0241\u0247\u024d\u0251\u0258\u025a\u025c\u0261\u0263")
        buf.write("\u0265\u0269\u026f\u0273\u027a\u027c\u027e\u0283\u0285")
        buf.write("\u0291\u0298\u029d\u02a1\u02a4\u02aa\u02ae\u02b3\u02b7")
        buf.write("\u02bb\u02c9\u02d1\u02d9\u02db\u02df\u02e8\u02ef\u02f1")
        buf.write("\u02fa\u02ff\u0304\u030b\u030f\u0316\u031e\u0327\u0330")
        buf.write("\u0337\u033d\u034a\u0350\u0359\u0364\u036f\u0374\u0379")
        buf.write("\u037e\u0386\u038f\u0395\u0397\u039f\u03a3\u03ab\u03ae")
        buf.write("\u03b2\u03b6\u03bd\u03c7\u03cf\u03d5\u03dd\u03ed\u03f7")
        buf.write("\u03ff\u0407\u040f\u0417\u041f\u0425\u042a\u042d\u0433")
        buf.write("\u0439\u043e\u0443\u044b\u0451\u0455\u045b\u045f\u0463")
        buf.write("\u0465\u0469\u0472\u0479\u047d\u0481\u0485\u0488\u048a")
        buf.write("\u048e\u0492\u0497\u049b\u049f\u04a6\u04aa\u04b2\u04bc")
        buf.write("\u04c0\u04c4\u04c6\u04ca\u04d0\u04d4\u04d8\u04da\u04dc")
        buf.write("\u04e2\u04e5\u04ef\u04f3\u04f7\u0501\u0505\u0508\u050f")
        buf.write("\u0514\u051a\u051f")
        return buf.getvalue()


class GrammarParser ( Parser ):

    grammarFileName = "Grammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'#omp'", "'parallel'", "'sections'", 
                     "'section'", "'master'", "'single'", "'critical'", 
                     "'barrier'", "'atomic'", "'num_threads('", "'shared('", 
                     "'private('", "'firstprivate('", "'lastprivate('", 
                     "'reduction('", "'min'", "'max'", "'&&'", "'||'", "'schedule('", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'finally'", "'with'", "'except'", "'lambda'", "'or'", 
                     "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", 
                     "'class'", "'yield'", "'del'", "'pass'", "'continue'", 
                     "'break'", "'async'", "'await'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", 
                     "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "SCHEDULE", "STRING", "NUMBER", "INTEGER", 
                      "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", 
                      "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", 
                      "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", "TRUE", 
                      "FALSE", "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", 
                      "BREAK", "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ]

    RULE_file_input = 0
    RULE_stmt = 1
    RULE_omp_stmt = 2
    RULE_omp_directive = 3
    RULE_parallel_directive = 4
    RULE_parallel_for_directive = 5
    RULE_for_directive = 6
    RULE_parallel_sections_directive = 7
    RULE_sections_directive = 8
    RULE_section_directive = 9
    RULE_master_directive = 10
    RULE_single_directive = 11
    RULE_critical_directive = 12
    RULE_barrier_directive = 13
    RULE_atomic_directive = 14
    RULE_num_threads = 15
    RULE_shared = 16
    RULE_private_ = 17
    RULE_first_private = 18
    RULE_last_private = 19
    RULE_reduction = 20
    RULE_schedule = 21
    RULE_for_suite = 22
    RULE_sections_suite = 23
    RULE_simple_stmt = 24
    RULE_compound_stmt = 25
    RULE_single_input = 26
    RULE_eval_input = 27
    RULE_decorator = 28
    RULE_decorators = 29
    RULE_decorated = 30
    RULE_async_funcdef = 31
    RULE_funcdef = 32
    RULE_parameters = 33
    RULE_typedargslist = 34
    RULE_tfpdef = 35
    RULE_varargslist = 36
    RULE_vfpdef = 37
    RULE_small_stmt = 38
    RULE_expr_stmt = 39
    RULE_annassign = 40
    RULE_testlist_star_expr = 41
    RULE_augassign = 42
    RULE_del_stmt = 43
    RULE_pass_stmt = 44
    RULE_flow_stmt = 45
    RULE_break_stmt = 46
    RULE_continue_stmt = 47
    RULE_return_stmt = 48
    RULE_yield_stmt = 49
    RULE_raise_stmt = 50
    RULE_import_stmt = 51
    RULE_import_name = 52
    RULE_import_from = 53
    RULE_import_as_name = 54
    RULE_dotted_as_name = 55
    RULE_import_as_names = 56
    RULE_dotted_as_names = 57
    RULE_dotted_name = 58
    RULE_global_stmt = 59
    RULE_nonlocal_stmt = 60
    RULE_assert_stmt = 61
    RULE_async_stmt = 62
    RULE_if_stmt = 63
    RULE_while_stmt = 64
    RULE_for_stmt = 65
    RULE_try_stmt = 66
    RULE_with_stmt = 67
    RULE_with_item = 68
    RULE_except_clause = 69
    RULE_suite = 70
    RULE_test = 71
    RULE_test_nocond = 72
    RULE_lambdef = 73
    RULE_lambdef_nocond = 74
    RULE_or_test = 75
    RULE_and_test = 76
    RULE_not_test = 77
    RULE_comparison = 78
    RULE_comp_op = 79
    RULE_star_expr = 80
    RULE_expr = 81
    RULE_xor_expr = 82
    RULE_and_expr = 83
    RULE_shift_expr = 84
    RULE_arith_expr = 85
    RULE_term = 86
    RULE_factor = 87
    RULE_power = 88
    RULE_atom_expr = 89
    RULE_atom = 90
    RULE_testlist_comp = 91
    RULE_trailer = 92
    RULE_subscriptlist = 93
    RULE_subscript = 94
    RULE_sliceop = 95
    RULE_exprlist = 96
    RULE_testlist = 97
    RULE_dictorsetmaker = 98
    RULE_classdef = 99
    RULE_arglist = 100
    RULE_argument = 101
    RULE_comp_iter = 102
    RULE_comp_for = 103
    RULE_comp_if = 104
    RULE_encoding_decl = 105
    RULE_yield_expr = 106
    RULE_yield_arg = 107

    ruleNames =  [ "file_input", "stmt", "omp_stmt", "omp_directive", "parallel_directive", 
                   "parallel_for_directive", "for_directive", "parallel_sections_directive", 
                   "sections_directive", "section_directive", "master_directive", 
                   "single_directive", "critical_directive", "barrier_directive", 
                   "atomic_directive", "num_threads", "shared", "private_", 
                   "first_private", "last_private", "reduction", "schedule", 
                   "for_suite", "sections_suite", "simple_stmt", "compound_stmt", 
                   "single_input", "eval_input", "decorator", "decorators", 
                   "decorated", "async_funcdef", "funcdef", "parameters", 
                   "typedargslist", "tfpdef", "varargslist", "vfpdef", "small_stmt", 
                   "expr_stmt", "annassign", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "async_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom_expr", "atom", "testlist_comp", "trailer", 
                   "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    SCHEDULE=21
    STRING=22
    NUMBER=23
    INTEGER=24
    DEF=25
    RETURN=26
    RAISE=27
    FROM=28
    IMPORT=29
    AS=30
    GLOBAL=31
    NONLOCAL=32
    ASSERT=33
    IF=34
    ELIF=35
    ELSE=36
    WHILE=37
    FOR=38
    IN=39
    TRY=40
    FINALLY=41
    WITH=42
    EXCEPT=43
    LAMBDA=44
    OR=45
    AND=46
    NOT=47
    IS=48
    NONE=49
    TRUE=50
    FALSE=51
    CLASS=52
    YIELD=53
    DEL=54
    PASS=55
    CONTINUE=56
    BREAK=57
    ASYNC=58
    AWAIT=59
    NEWLINE=60
    NAME=61
    STRING_LITERAL=62
    BYTES_LITERAL=63
    DECIMAL_INTEGER=64
    OCT_INTEGER=65
    HEX_INTEGER=66
    BIN_INTEGER=67
    FLOAT_NUMBER=68
    IMAG_NUMBER=69
    DOT=70
    ELLIPSIS=71
    STAR=72
    OPEN_PAREN=73
    CLOSE_PAREN=74
    COMMA=75
    COLON=76
    SEMI_COLON=77
    POWER=78
    ASSIGN=79
    OPEN_BRACK=80
    CLOSE_BRACK=81
    OR_OP=82
    XOR=83
    AND_OP=84
    LEFT_SHIFT=85
    RIGHT_SHIFT=86
    ADD=87
    MINUS=88
    DIV=89
    MOD=90
    IDIV=91
    NOT_OP=92
    OPEN_BRACE=93
    CLOSE_BRACE=94
    LESS_THAN=95
    GREATER_THAN=96
    EQUALS=97
    GT_EQ=98
    LT_EQ=99
    NOT_EQ_1=100
    NOT_EQ_2=101
    AT=102
    ARROW=103
    ADD_ASSIGN=104
    SUB_ASSIGN=105
    MULT_ASSIGN=106
    AT_ASSIGN=107
    DIV_ASSIGN=108
    MOD_ASSIGN=109
    AND_ASSIGN=110
    OR_ASSIGN=111
    XOR_ASSIGN=112
    LEFT_SHIFT_ASSIGN=113
    RIGHT_SHIFT_ASSIGN=114
    POWER_ASSIGN=115
    IDIV_ASSIGN=116
    SKIP_=117
    UNKNOWN_CHAR=118
    INDENT=119
    DEDENT=120

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GrammarParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.StmtContext)
            else:
                return self.getTypedRuleContext(GrammarParser.StmtContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_file_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = GrammarParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.T__0) | (1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.DEF) | (1 << GrammarParser.RETURN) | (1 << GrammarParser.RAISE) | (1 << GrammarParser.FROM) | (1 << GrammarParser.IMPORT) | (1 << GrammarParser.GLOBAL) | (1 << GrammarParser.NONLOCAL) | (1 << GrammarParser.ASSERT) | (1 << GrammarParser.IF) | (1 << GrammarParser.WHILE) | (1 << GrammarParser.FOR) | (1 << GrammarParser.TRY) | (1 << GrammarParser.WITH) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.CLASS) | (1 << GrammarParser.YIELD) | (1 << GrammarParser.DEL) | (1 << GrammarParser.PASS) | (1 << GrammarParser.CONTINUE) | (1 << GrammarParser.BREAK) | (1 << GrammarParser.ASYNC) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NEWLINE) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)) | (1 << (GrammarParser.AT - 71)))) != 0):
                self.state = 218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.NEWLINE]:
                    self.state = 216
                    self.match(GrammarParser.NEWLINE)
                    pass
                elif token in [GrammarParser.T__0, GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.DEF, GrammarParser.RETURN, GrammarParser.RAISE, GrammarParser.FROM, GrammarParser.IMPORT, GrammarParser.GLOBAL, GrammarParser.NONLOCAL, GrammarParser.ASSERT, GrammarParser.IF, GrammarParser.WHILE, GrammarParser.FOR, GrammarParser.TRY, GrammarParser.WITH, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.CLASS, GrammarParser.YIELD, GrammarParser.DEL, GrammarParser.PASS, GrammarParser.CONTINUE, GrammarParser.BREAK, GrammarParser.ASYNC, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE, GrammarParser.AT]:
                    self.state = 217
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self.match(GrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Compound_stmtContext,0)


        def omp_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Omp_stmtContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = GrammarParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.RETURN, GrammarParser.RAISE, GrammarParser.FROM, GrammarParser.IMPORT, GrammarParser.GLOBAL, GrammarParser.NONLOCAL, GrammarParser.ASSERT, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.YIELD, GrammarParser.DEL, GrammarParser.PASS, GrammarParser.CONTINUE, GrammarParser.BREAK, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                self.simple_stmt()
                pass
            elif token in [GrammarParser.DEF, GrammarParser.IF, GrammarParser.WHILE, GrammarParser.FOR, GrammarParser.TRY, GrammarParser.WITH, GrammarParser.CLASS, GrammarParser.ASYNC, GrammarParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self.compound_stmt()
                pass
            elif token in [GrammarParser.T__0]:
                self.enterOuterAlt(localctx, 3)
                self.state = 227
                self.omp_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Omp_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def omp_directive(self):
            return self.getTypedRuleContext(GrammarParser.Omp_directiveContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_omp_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOmp_stmt" ):
                return visitor.visitOmp_stmt(self)
            else:
                return visitor.visitChildren(self)




    def omp_stmt(self):

        localctx = GrammarParser.Omp_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_omp_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(GrammarParser.T__0)
            self.state = 231
            self.omp_directive()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Omp_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parallel_directive(self):
            return self.getTypedRuleContext(GrammarParser.Parallel_directiveContext,0)


        def for_directive(self):
            return self.getTypedRuleContext(GrammarParser.For_directiveContext,0)


        def parallel_for_directive(self):
            return self.getTypedRuleContext(GrammarParser.Parallel_for_directiveContext,0)


        def sections_directive(self):
            return self.getTypedRuleContext(GrammarParser.Sections_directiveContext,0)


        def parallel_sections_directive(self):
            return self.getTypedRuleContext(GrammarParser.Parallel_sections_directiveContext,0)


        def barrier_directive(self):
            return self.getTypedRuleContext(GrammarParser.Barrier_directiveContext,0)


        def atomic_directive(self):
            return self.getTypedRuleContext(GrammarParser.Atomic_directiveContext,0)


        def critical_directive(self):
            return self.getTypedRuleContext(GrammarParser.Critical_directiveContext,0)


        def master_directive(self):
            return self.getTypedRuleContext(GrammarParser.Master_directiveContext,0)


        def single_directive(self):
            return self.getTypedRuleContext(GrammarParser.Single_directiveContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_omp_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOmp_directive" ):
                return visitor.visitOmp_directive(self)
            else:
                return visitor.visitChildren(self)




    def omp_directive(self):

        localctx = GrammarParser.Omp_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_omp_directive)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.parallel_directive()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.for_directive()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 235
                self.parallel_for_directive()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 236
                self.sections_directive()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 237
                self.parallel_sections_directive()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 238
                self.barrier_directive()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 239
                self.atomic_directive()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 240
                self.critical_directive()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 241
                self.master_directive()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 242
                self.single_directive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def num_threads(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Num_threadsContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Num_threadsContext,i)


        def shared(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SharedContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SharedContext,i)


        def private_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Private_Context)
            else:
                return self.getTypedRuleContext(GrammarParser.Private_Context,i)


        def reduction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ReductionContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ReductionContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_parallel_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_directive" ):
                return visitor.visitParallel_directive(self)
            else:
                return visitor.visitChildren(self)




    def parallel_directive(self):

        localctx = GrammarParser.Parallel_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_parallel_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(GrammarParser.T__1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.T__9) | (1 << GrammarParser.T__10) | (1 << GrammarParser.T__11) | (1 << GrammarParser.T__14))) != 0):
                self.state = 250
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.T__9]:
                    self.state = 246
                    self.num_threads()
                    pass
                elif token in [GrammarParser.T__10]:
                    self.state = 247
                    self.shared()
                    pass
                elif token in [GrammarParser.T__11]:
                    self.state = 248
                    self.private_()
                    pass
                elif token in [GrammarParser.T__14]:
                    self.state = 249
                    self.reduction()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 255
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_for_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def for_suite(self):
            return self.getTypedRuleContext(GrammarParser.For_suiteContext,0)


        def num_threads(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Num_threadsContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Num_threadsContext,i)


        def schedule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ScheduleContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ScheduleContext,i)


        def shared(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SharedContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SharedContext,i)


        def private_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Private_Context)
            else:
                return self.getTypedRuleContext(GrammarParser.Private_Context,i)


        def reduction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ReductionContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ReductionContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_parallel_for_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_for_directive" ):
                return visitor.visitParallel_for_directive(self)
            else:
                return visitor.visitChildren(self)




    def parallel_for_directive(self):

        localctx = GrammarParser.Parallel_for_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_parallel_for_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(GrammarParser.T__1)
            self.state = 258
            self.match(GrammarParser.FOR)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.T__9) | (1 << GrammarParser.T__10) | (1 << GrammarParser.T__11) | (1 << GrammarParser.T__14) | (1 << GrammarParser.T__19))) != 0):
                self.state = 264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.T__9]:
                    self.state = 259
                    self.num_threads()
                    pass
                elif token in [GrammarParser.T__19]:
                    self.state = 260
                    self.schedule()
                    pass
                elif token in [GrammarParser.T__10]:
                    self.state = 261
                    self.shared()
                    pass
                elif token in [GrammarParser.T__11]:
                    self.state = 262
                    self.private_()
                    pass
                elif token in [GrammarParser.T__14]:
                    self.state = 263
                    self.reduction()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 269
            self.for_suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def for_suite(self):
            return self.getTypedRuleContext(GrammarParser.For_suiteContext,0)


        def schedule(self):
            return self.getTypedRuleContext(GrammarParser.ScheduleContext,0)


        def private_(self):
            return self.getTypedRuleContext(GrammarParser.Private_Context,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_for_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_directive" ):
                return visitor.visitFor_directive(self)
            else:
                return visitor.visitChildren(self)




    def for_directive(self):

        localctx = GrammarParser.For_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_for_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(GrammarParser.FOR)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.T__19:
                self.state = 272
                self.schedule()


            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.T__11:
                self.state = 275
                self.private_()


            self.state = 278
            self.for_suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parallel_sections_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sections_suite(self):
            return self.getTypedRuleContext(GrammarParser.Sections_suiteContext,0)


        def num_threads(self):
            return self.getTypedRuleContext(GrammarParser.Num_threadsContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_parallel_sections_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_sections_directive" ):
                return visitor.visitParallel_sections_directive(self)
            else:
                return visitor.visitChildren(self)




    def parallel_sections_directive(self):

        localctx = GrammarParser.Parallel_sections_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parallel_sections_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(GrammarParser.T__1)
            self.state = 281
            self.match(GrammarParser.T__2)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.T__9:
                self.state = 282
                self.num_threads()


            self.state = 285
            self.sections_suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sections_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sections_suite(self):
            return self.getTypedRuleContext(GrammarParser.Sections_suiteContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_sections_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSections_directive" ):
                return visitor.visitSections_directive(self)
            else:
                return visitor.visitChildren(self)




    def sections_directive(self):

        localctx = GrammarParser.Sections_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_sections_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(GrammarParser.T__2)
            self.state = 288
            self.sections_suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Section_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_section_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_directive" ):
                return visitor.visitSection_directive(self)
            else:
                return visitor.visitChildren(self)




    def section_directive(self):

        localctx = GrammarParser.Section_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_section_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(GrammarParser.T__3)
            self.state = 291
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Master_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_master_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaster_directive" ):
                return visitor.visitMaster_directive(self)
            else:
                return visitor.visitChildren(self)




    def master_directive(self):

        localctx = GrammarParser.Master_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_master_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(GrammarParser.T__4)
            self.state = 294
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_single_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_directive" ):
                return visitor.visitSingle_directive(self)
            else:
                return visitor.visitChildren(self)




    def single_directive(self):

        localctx = GrammarParser.Single_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_single_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(GrammarParser.T__5)
            self.state = 297
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Critical_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_critical_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCritical_directive" ):
                return visitor.visitCritical_directive(self)
            else:
                return visitor.visitChildren(self)




    def critical_directive(self):

        localctx = GrammarParser.Critical_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_critical_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(GrammarParser.T__6)
            self.state = 300
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Barrier_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_barrier_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBarrier_directive" ):
                return visitor.visitBarrier_directive(self)
            else:
                return visitor.visitChildren(self)




    def barrier_directive(self):

        localctx = GrammarParser.Barrier_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_barrier_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(GrammarParser.T__7)
            self.state = 303
            self.match(GrammarParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atomic_directiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GrammarParser.ExprContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(GrammarParser.ADD_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(GrammarParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(GrammarParser.DIV_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(GrammarParser.SUB_ASSIGN, 0)

        def ASSIGN(self):
            return self.getToken(GrammarParser.ASSIGN, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_atomic_directive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic_directive" ):
                return visitor.visitAtomic_directive(self)
            else:
                return visitor.visitChildren(self)




    def atomic_directive(self):

        localctx = GrammarParser.Atomic_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_atomic_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(GrammarParser.T__8)
            self.state = 306
            self.match(GrammarParser.NEWLINE)
            self.state = 307
            self.match(GrammarParser.NAME)
            self.state = 308
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (GrammarParser.ASSIGN - 79)) | (1 << (GrammarParser.ADD_ASSIGN - 79)) | (1 << (GrammarParser.SUB_ASSIGN - 79)) | (1 << (GrammarParser.MULT_ASSIGN - 79)) | (1 << (GrammarParser.DIV_ASSIGN - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 309
            self.expr()
            self.state = 310
            self.match(GrammarParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_threadsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self):
            return self.getTypedRuleContext(GrammarParser.ArgumentContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_num_threads

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum_threads" ):
                return visitor.visitNum_threads(self)
            else:
                return visitor.visitChildren(self)




    def num_threads(self):

        localctx = GrammarParser.Num_threadsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_num_threads)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(GrammarParser.T__9)
            self.state = 313
            self.argument()
            self.state = 314
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SharedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_shared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShared" ):
                return visitor.visitShared(self)
            else:
                return visitor.visitChildren(self)




    def shared(self):

        localctx = GrammarParser.SharedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_shared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(GrammarParser.T__10)
            self.state = 317
            self.match(GrammarParser.NAME)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 318
                self.match(GrammarParser.COMMA)
                self.state = 319
                self.match(GrammarParser.NAME)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Private_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_private_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_" ):
                return visitor.visitPrivate_(self)
            else:
                return visitor.visitChildren(self)




    def private_(self):

        localctx = GrammarParser.Private_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_private_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(GrammarParser.T__11)
            self.state = 328
            self.match(GrammarParser.NAME)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 329
                self.match(GrammarParser.COMMA)
                self.state = 330
                self.match(GrammarParser.NAME)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 336
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class First_privateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_first_private

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst_private" ):
                return visitor.visitFirst_private(self)
            else:
                return visitor.visitChildren(self)




    def first_private(self):

        localctx = GrammarParser.First_privateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_first_private)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(GrammarParser.T__12)
            self.state = 339
            self.match(GrammarParser.NAME)
            self.state = 340
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_privateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_last_private

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast_private" ):
                return visitor.visitLast_private(self)
            else:
                return visitor.visitChildren(self)




    def last_private(self):

        localctx = GrammarParser.Last_privateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_last_private)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(GrammarParser.T__13)
            self.state = 343
            self.match(GrammarParser.NAME)
            self.state = 344
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReductionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def ADD(self):
            return self.getToken(GrammarParser.ADD, 0)

        def MINUS(self):
            return self.getToken(GrammarParser.MINUS, 0)

        def STAR(self):
            return self.getToken(GrammarParser.STAR, 0)

        def AND_OP(self):
            return self.getToken(GrammarParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(GrammarParser.OR_OP, 0)

        def XOR(self):
            return self.getToken(GrammarParser.XOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_reduction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduction" ):
                return visitor.visitReduction(self)
            else:
                return visitor.visitChildren(self)




    def reduction(self):

        localctx = GrammarParser.ReductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_reduction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(GrammarParser.T__14)
            self.state = 347
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.T__15) | (1 << GrammarParser.T__16) | (1 << GrammarParser.T__17) | (1 << GrammarParser.T__18))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (GrammarParser.STAR - 72)) | (1 << (GrammarParser.OR_OP - 72)) | (1 << (GrammarParser.XOR - 72)) | (1 << (GrammarParser.AND_OP - 72)) | (1 << (GrammarParser.ADD - 72)) | (1 << (GrammarParser.MINUS - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 348
            self.match(GrammarParser.COLON)
            self.state = 349
            self.match(GrammarParser.NAME)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 350
                self.match(GrammarParser.COMMA)
                self.state = 351
                self.match(GrammarParser.NAME)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 357
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEDULE(self):
            return self.getToken(GrammarParser.SCHEDULE, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(GrammarParser.COMMA, 0)

        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_schedule

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchedule" ):
                return visitor.visitSchedule(self)
            else:
                return visitor.visitChildren(self)




    def schedule(self):

        localctx = GrammarParser.ScheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_schedule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(GrammarParser.T__19)
            self.state = 360
            self.match(GrammarParser.SCHEDULE)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 361
                self.match(GrammarParser.COMMA)
                self.state = 362
                self.match(GrammarParser.NUMBER)


            self.state = 365
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(GrammarParser.INDENT, 0)

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def IN(self):
            return self.getToken(GrammarParser.IN, 0)

        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ArgumentContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def DEDENT(self):
            return self.getToken(GrammarParser.DEDENT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_for_suite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_suite" ):
                return visitor.visitFor_suite(self)
            else:
                return visitor.visitChildren(self)




    def for_suite(self):

        localctx = GrammarParser.For_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_for_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(GrammarParser.NEWLINE)
            self.state = 368
            self.match(GrammarParser.INDENT)
            self.state = 369
            self.match(GrammarParser.FOR)
            self.state = 370
            self.match(GrammarParser.NAME)
            self.state = 371
            self.match(GrammarParser.IN)
            self.state = 372
            self.match(GrammarParser.NAME)
            self.state = 373
            self.match(GrammarParser.OPEN_PAREN)
            self.state = 374
            self.argument()
            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 375
                self.match(GrammarParser.COMMA)
                self.state = 376
                self.argument()


            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 379
                self.match(GrammarParser.COMMA)
                self.state = 380
                self.argument()


            self.state = 383
            self.match(GrammarParser.CLOSE_PAREN)
            self.state = 384
            self.match(GrammarParser.COLON)
            self.state = 385
            self.suite()
            self.state = 386
            self.match(GrammarParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sections_suiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(GrammarParser.INDENT, 0)

        def section_directive(self):
            return self.getTypedRuleContext(GrammarParser.Section_directiveContext,0)


        def DEDENT(self):
            return self.getToken(GrammarParser.DEDENT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sections_suite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSections_suite" ):
                return visitor.visitSections_suite(self)
            else:
                return visitor.visitChildren(self)




    def sections_suite(self):

        localctx = GrammarParser.Sections_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sections_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(GrammarParser.NEWLINE)
            self.state = 389
            self.match(GrammarParser.INDENT)
            self.state = 390
            self.section_directive()
            self.state = 391
            self.match(GrammarParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SEMI_COLON)
            else:
                return self.getToken(GrammarParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_simple_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = GrammarParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.small_stmt()
            self.state = 398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 394
                    self.match(GrammarParser.SEMI_COLON)
                    self.state = 395
                    self.small_stmt() 
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.SEMI_COLON:
                self.state = 401
                self.match(GrammarParser.SEMI_COLON)


            self.state = 404
            self.match(GrammarParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(GrammarParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(GrammarParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(GrammarParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(GrammarParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(GrammarParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(GrammarParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(GrammarParser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Async_stmtContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_compound_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = GrammarParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_compound_stmt)
        try:
            self.state = 415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.if_stmt()
                pass
            elif token in [GrammarParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.while_stmt()
                pass
            elif token in [GrammarParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 408
                self.for_stmt()
                pass
            elif token in [GrammarParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 409
                self.try_stmt()
                pass
            elif token in [GrammarParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 410
                self.with_stmt()
                pass
            elif token in [GrammarParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 411
                self.funcdef()
                pass
            elif token in [GrammarParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 412
                self.classdef()
                pass
            elif token in [GrammarParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 413
                self.decorated()
                pass
            elif token in [GrammarParser.ASYNC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 414
                self.async_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_single_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = GrammarParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_single_input)
        try:
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.match(GrammarParser.NEWLINE)
                pass
            elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.RETURN, GrammarParser.RAISE, GrammarParser.FROM, GrammarParser.IMPORT, GrammarParser.GLOBAL, GrammarParser.NONLOCAL, GrammarParser.ASSERT, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.YIELD, GrammarParser.DEL, GrammarParser.PASS, GrammarParser.CONTINUE, GrammarParser.BREAK, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.simple_stmt()
                pass
            elif token in [GrammarParser.DEF, GrammarParser.IF, GrammarParser.WHILE, GrammarParser.FOR, GrammarParser.TRY, GrammarParser.WITH, GrammarParser.CLASS, GrammarParser.ASYNC, GrammarParser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.compound_stmt()
                self.state = 420
                self.match(GrammarParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(GrammarParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(GrammarParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_eval_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = GrammarParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.testlist()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.NEWLINE:
                self.state = 425
                self.match(GrammarParser.NEWLINE)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.match(GrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(GrammarParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(GrammarParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(GrammarParser.ArglistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_decorator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = GrammarParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(GrammarParser.AT)
            self.state = 434
            self.dotted_name()
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.OPEN_PAREN:
                self.state = 435
                self.match(GrammarParser.OPEN_PAREN)
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.POWER - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 436
                    self.arglist()


                self.state = 439
                self.match(GrammarParser.CLOSE_PAREN)


            self.state = 442
            self.match(GrammarParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.DecoratorContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_decorators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = GrammarParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 444
                self.decorator()
                self.state = 447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GrammarParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(GrammarParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(GrammarParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(GrammarParser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(GrammarParser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_decorated

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = GrammarParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.decorators()
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.CLASS]:
                self.state = 450
                self.classdef()
                pass
            elif token in [GrammarParser.DEF]:
                self.state = 451
                self.funcdef()
                pass
            elif token in [GrammarParser.ASYNC]:
                self.state = 452
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(GrammarParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(GrammarParser.FuncdefContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_async_funcdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = GrammarParser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(GrammarParser.ASYNC)
            self.state = 456
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(GrammarParser.DEF, 0)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(GrammarParser.ParametersContext,0)


        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(GrammarParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_funcdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = GrammarParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(GrammarParser.DEF)
            self.state = 459
            self.match(GrammarParser.NAME)
            self.state = 460
            self.parameters()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.ARROW:
                self.state = 461
                self.match(GrammarParser.ARROW)
                self.state = 462
                self.test()


            self.state = 465
            self.match(GrammarParser.COLON)
            self.state = 466
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(GrammarParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = GrammarParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(GrammarParser.OPEN_PAREN)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (GrammarParser.NAME - 61)) | (1 << (GrammarParser.STAR - 61)) | (1 << (GrammarParser.POWER - 61)))) != 0):
                self.state = 469
                self.typedargslist()


            self.state = 472
            self.match(GrammarParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(GrammarParser.STAR, 0)

        def POWER(self):
            return self.getToken(GrammarParser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.ASSIGN)
            else:
                return self.getToken(GrammarParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_typedargslist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = GrammarParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.NAME]:
                self.state = 474
                self.tfpdef()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.ASSIGN:
                    self.state = 475
                    self.match(GrammarParser.ASSIGN)
                    self.state = 476
                    self.test()


                self.state = 487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 479
                        self.match(GrammarParser.COMMA)
                        self.state = 480
                        self.tfpdef()
                        self.state = 483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.ASSIGN:
                            self.state = 481
                            self.match(GrammarParser.ASSIGN)
                            self.state = 482
                            self.test()

                 
                    self.state = 489
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 490
                    self.match(GrammarParser.COMMA)
                    self.state = 521
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [GrammarParser.STAR]:
                        self.state = 491
                        self.match(GrammarParser.STAR)
                        self.state = 493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.NAME:
                            self.state = 492
                            self.tfpdef()


                        self.state = 503
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 495
                                self.match(GrammarParser.COMMA)
                                self.state = 496
                                self.tfpdef()
                                self.state = 499
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==GrammarParser.ASSIGN:
                                    self.state = 497
                                    self.match(GrammarParser.ASSIGN)
                                    self.state = 498
                                    self.test()

                         
                            self.state = 505
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                        self.state = 514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.COMMA:
                            self.state = 506
                            self.match(GrammarParser.COMMA)
                            self.state = 512
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==GrammarParser.POWER:
                                self.state = 507
                                self.match(GrammarParser.POWER)
                                self.state = 508
                                self.tfpdef()
                                self.state = 510
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==GrammarParser.COMMA:
                                    self.state = 509
                                    self.match(GrammarParser.COMMA)






                        pass
                    elif token in [GrammarParser.POWER]:
                        self.state = 516
                        self.match(GrammarParser.POWER)
                        self.state = 517
                        self.tfpdef()
                        self.state = 519
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.COMMA:
                            self.state = 518
                            self.match(GrammarParser.COMMA)


                        pass
                    elif token in [GrammarParser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [GrammarParser.STAR]:
                self.state = 525
                self.match(GrammarParser.STAR)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.NAME:
                    self.state = 526
                    self.tfpdef()


                self.state = 537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 529
                        self.match(GrammarParser.COMMA)
                        self.state = 530
                        self.tfpdef()
                        self.state = 533
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.ASSIGN:
                            self.state = 531
                            self.match(GrammarParser.ASSIGN)
                            self.state = 532
                            self.test()

                 
                    self.state = 539
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 540
                    self.match(GrammarParser.COMMA)
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GrammarParser.POWER:
                        self.state = 541
                        self.match(GrammarParser.POWER)
                        self.state = 542
                        self.tfpdef()
                        self.state = 544
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.COMMA:
                            self.state = 543
                            self.match(GrammarParser.COMMA)






                pass
            elif token in [GrammarParser.POWER]:
                self.state = 550
                self.match(GrammarParser.POWER)
                self.state = 551
                self.tfpdef()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 552
                    self.match(GrammarParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_tfpdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = GrammarParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(GrammarParser.NAME)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COLON:
                self.state = 558
                self.match(GrammarParser.COLON)
                self.state = 559
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(GrammarParser.STAR, 0)

        def POWER(self):
            return self.getToken(GrammarParser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.ASSIGN)
            else:
                return self.getToken(GrammarParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_varargslist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = GrammarParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.NAME]:
                self.state = 562
                self.vfpdef()
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.ASSIGN:
                    self.state = 563
                    self.match(GrammarParser.ASSIGN)
                    self.state = 564
                    self.test()


                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 567
                        self.match(GrammarParser.COMMA)
                        self.state = 568
                        self.vfpdef()
                        self.state = 571
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.ASSIGN:
                            self.state = 569
                            self.match(GrammarParser.ASSIGN)
                            self.state = 570
                            self.test()

                 
                    self.state = 577
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 578
                    self.match(GrammarParser.COMMA)
                    self.state = 609
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [GrammarParser.STAR]:
                        self.state = 579
                        self.match(GrammarParser.STAR)
                        self.state = 581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.NAME:
                            self.state = 580
                            self.vfpdef()


                        self.state = 591
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 583
                                self.match(GrammarParser.COMMA)
                                self.state = 584
                                self.vfpdef()
                                self.state = 587
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==GrammarParser.ASSIGN:
                                    self.state = 585
                                    self.match(GrammarParser.ASSIGN)
                                    self.state = 586
                                    self.test()

                         
                            self.state = 593
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                        self.state = 602
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.COMMA:
                            self.state = 594
                            self.match(GrammarParser.COMMA)
                            self.state = 600
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==GrammarParser.POWER:
                                self.state = 595
                                self.match(GrammarParser.POWER)
                                self.state = 596
                                self.vfpdef()
                                self.state = 598
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==GrammarParser.COMMA:
                                    self.state = 597
                                    self.match(GrammarParser.COMMA)






                        pass
                    elif token in [GrammarParser.POWER]:
                        self.state = 604
                        self.match(GrammarParser.POWER)
                        self.state = 605
                        self.vfpdef()
                        self.state = 607
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.COMMA:
                            self.state = 606
                            self.match(GrammarParser.COMMA)


                        pass
                    elif token in [GrammarParser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [GrammarParser.STAR]:
                self.state = 613
                self.match(GrammarParser.STAR)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.NAME:
                    self.state = 614
                    self.vfpdef()


                self.state = 625
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 617
                        self.match(GrammarParser.COMMA)
                        self.state = 618
                        self.vfpdef()
                        self.state = 621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.ASSIGN:
                            self.state = 619
                            self.match(GrammarParser.ASSIGN)
                            self.state = 620
                            self.test()

                 
                    self.state = 627
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 628
                    self.match(GrammarParser.COMMA)
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GrammarParser.POWER:
                        self.state = 629
                        self.match(GrammarParser.POWER)
                        self.state = 630
                        self.vfpdef()
                        self.state = 632
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==GrammarParser.COMMA:
                            self.state = 631
                            self.match(GrammarParser.COMMA)






                pass
            elif token in [GrammarParser.POWER]:
                self.state = 638
                self.match(GrammarParser.POWER)
                self.state = 639
                self.vfpdef()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 640
                    self.match(GrammarParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_vfpdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = GrammarParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(GrammarParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_small_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmall_stmt" ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = GrammarParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_small_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.state = 647
                self.expr_stmt()
                pass
            elif token in [GrammarParser.DEL]:
                self.state = 648
                self.del_stmt()
                pass
            elif token in [GrammarParser.PASS]:
                self.state = 649
                self.pass_stmt()
                pass
            elif token in [GrammarParser.RETURN, GrammarParser.RAISE, GrammarParser.YIELD, GrammarParser.CONTINUE, GrammarParser.BREAK]:
                self.state = 650
                self.flow_stmt()
                pass
            elif token in [GrammarParser.FROM, GrammarParser.IMPORT]:
                self.state = 651
                self.import_stmt()
                pass
            elif token in [GrammarParser.GLOBAL]:
                self.state = 652
                self.global_stmt()
                pass
            elif token in [GrammarParser.NONLOCAL]:
                self.state = 653
                self.nonlocal_stmt()
                pass
            elif token in [GrammarParser.ASSERT]:
                self.state = 654
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s79 = None # Token
            self.assignments = list() # of Tokens

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(GrammarParser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(GrammarParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(GrammarParser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.ASSIGN)
            else:
                return self.getToken(GrammarParser.ASSIGN, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_expr_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = GrammarParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.testlist_star_expr()
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.COLON]:
                self.state = 658
                self.annassign()
                pass
            elif token in [GrammarParser.ADD_ASSIGN, GrammarParser.SUB_ASSIGN, GrammarParser.MULT_ASSIGN, GrammarParser.AT_ASSIGN, GrammarParser.DIV_ASSIGN, GrammarParser.MOD_ASSIGN, GrammarParser.AND_ASSIGN, GrammarParser.OR_ASSIGN, GrammarParser.XOR_ASSIGN, GrammarParser.LEFT_SHIFT_ASSIGN, GrammarParser.RIGHT_SHIFT_ASSIGN, GrammarParser.POWER_ASSIGN, GrammarParser.IDIV_ASSIGN]:
                self.state = 659
                self.augassign()
                self.state = 662
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.YIELD]:
                    self.state = 660
                    self.yield_expr()
                    pass
                elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                    self.state = 661
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [GrammarParser.NEWLINE, GrammarParser.SEMI_COLON, GrammarParser.ASSIGN]:
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GrammarParser.ASSIGN:
                    self.state = 664
                    localctx.s79 = self.match(GrammarParser.ASSIGN)
                    localctx.assignments.append(localctx.s79)
                    self.state = 667
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [GrammarParser.YIELD]:
                        self.state = 665
                        self.yield_expr()
                        pass
                    elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                        self.state = 666
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(GrammarParser.ASSIGN, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_annassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = GrammarParser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(GrammarParser.COLON)
            self.state = 677
            self.test()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.ASSIGN:
                self.state = 678
                self.match(GrammarParser.ASSIGN)
                self.state = 679
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_testlist_star_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = GrammarParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.state = 682
                self.test()
                pass
            elif token in [GrammarParser.STAR]:
                self.state = 683
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 686
                    self.match(GrammarParser.COMMA)
                    self.state = 689
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                        self.state = 687
                        self.test()
                        pass
                    elif token in [GrammarParser.STAR]:
                        self.state = 688
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 696
                self.match(GrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(GrammarParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(GrammarParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(GrammarParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(GrammarParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(GrammarParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(GrammarParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(GrammarParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(GrammarParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(GrammarParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(GrammarParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(GrammarParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(GrammarParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(GrammarParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_augassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = GrammarParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (GrammarParser.ADD_ASSIGN - 104)) | (1 << (GrammarParser.SUB_ASSIGN - 104)) | (1 << (GrammarParser.MULT_ASSIGN - 104)) | (1 << (GrammarParser.AT_ASSIGN - 104)) | (1 << (GrammarParser.DIV_ASSIGN - 104)) | (1 << (GrammarParser.MOD_ASSIGN - 104)) | (1 << (GrammarParser.AND_ASSIGN - 104)) | (1 << (GrammarParser.OR_ASSIGN - 104)) | (1 << (GrammarParser.XOR_ASSIGN - 104)) | (1 << (GrammarParser.LEFT_SHIFT_ASSIGN - 104)) | (1 << (GrammarParser.RIGHT_SHIFT_ASSIGN - 104)) | (1 << (GrammarParser.POWER_ASSIGN - 104)) | (1 << (GrammarParser.IDIV_ASSIGN - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(GrammarParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(GrammarParser.ExprlistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_del_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = GrammarParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(GrammarParser.DEL)
            self.state = 702
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(GrammarParser.PASS, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_pass_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = GrammarParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(GrammarParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_flow_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = GrammarParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_flow_stmt)
        try:
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.break_stmt()
                pass
            elif token in [GrammarParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.continue_stmt()
                pass
            elif token in [GrammarParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.return_stmt()
                pass
            elif token in [GrammarParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 709
                self.raise_stmt()
                pass
            elif token in [GrammarParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 710
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(GrammarParser.BREAK, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_break_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = GrammarParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(GrammarParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(GrammarParser.CONTINUE, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_continue_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = GrammarParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(GrammarParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GrammarParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(GrammarParser.TestlistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_return_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = GrammarParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(GrammarParser.RETURN)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                self.state = 718
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(GrammarParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_yield_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = GrammarParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(GrammarParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def FROM(self):
            return self.getToken(GrammarParser.FROM, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_raise_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = GrammarParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(GrammarParser.RAISE)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                self.state = 724
                self.test()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.FROM:
                    self.state = 725
                    self.match(GrammarParser.FROM)
                    self.state = 726
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(GrammarParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(GrammarParser.Import_fromContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_import_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = GrammarParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_import_stmt)
        try:
            self.state = 733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.import_name()
                pass
            elif token in [GrammarParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(GrammarParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(GrammarParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_import_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = GrammarParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(GrammarParser.IMPORT)
            self.state = 736
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(GrammarParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(GrammarParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(GrammarParser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(GrammarParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(GrammarParser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.DOT)
            else:
                return self.getToken(GrammarParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.ELLIPSIS)
            else:
                return self.getToken(GrammarParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_import_from

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = GrammarParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(GrammarParser.FROM)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GrammarParser.DOT or _la==GrammarParser.ELLIPSIS:
                    self.state = 739
                    _la = self._input.LA(1)
                    if not(_la==GrammarParser.DOT or _la==GrammarParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 745
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 747 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 746
                    _la = self._input.LA(1)
                    if not(_la==GrammarParser.DOT or _la==GrammarParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 749 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GrammarParser.DOT or _la==GrammarParser.ELLIPSIS):
                        break

                pass


            self.state = 753
            self.match(GrammarParser.IMPORT)
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STAR]:
                self.state = 754
                self.match(GrammarParser.STAR)
                pass
            elif token in [GrammarParser.OPEN_PAREN]:
                self.state = 755
                self.match(GrammarParser.OPEN_PAREN)
                self.state = 756
                self.import_as_names()
                self.state = 757
                self.match(GrammarParser.CLOSE_PAREN)
                pass
            elif token in [GrammarParser.NAME]:
                self.state = 759
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def AS(self):
            return self.getToken(GrammarParser.AS, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_import_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = GrammarParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(GrammarParser.NAME)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.AS:
                self.state = 763
                self.match(GrammarParser.AS)
                self.state = 764
                self.match(GrammarParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(GrammarParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(GrammarParser.AS, 0)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_dotted_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = GrammarParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.dotted_name()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.AS:
                self.state = 768
                self.match(GrammarParser.AS)
                self.state = 769
                self.match(GrammarParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_import_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = GrammarParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.import_as_name()
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 773
                    self.match(GrammarParser.COMMA)
                    self.state = 774
                    self.import_as_name() 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 780
                self.match(GrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_dotted_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = GrammarParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.dotted_as_name()
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 784
                self.match(GrammarParser.COMMA)
                self.state = 785
                self.dotted_as_name()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.DOT)
            else:
                return self.getToken(GrammarParser.DOT, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_dotted_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = GrammarParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(GrammarParser.NAME)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.DOT:
                self.state = 792
                self.match(GrammarParser.DOT)
                self.state = 793
                self.match(GrammarParser.NAME)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(GrammarParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_global_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = GrammarParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(GrammarParser.GLOBAL)
            self.state = 800
            self.match(GrammarParser.NAME)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 801
                self.match(GrammarParser.COMMA)
                self.state = 802
                self.match(GrammarParser.NAME)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(GrammarParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NAME)
            else:
                return self.getToken(GrammarParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_nonlocal_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = GrammarParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(GrammarParser.NONLOCAL)
            self.state = 809
            self.match(GrammarParser.NAME)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 810
                self.match(GrammarParser.COMMA)
                self.state = 811
                self.match(GrammarParser.NAME)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(GrammarParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COMMA(self):
            return self.getToken(GrammarParser.COMMA, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_assert_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = GrammarParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(GrammarParser.ASSERT)
            self.state = 818
            self.test()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 819
                self.match(GrammarParser.COMMA)
                self.state = 820
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(GrammarParser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(GrammarParser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(GrammarParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(GrammarParser.For_stmtContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_async_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = GrammarParser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(GrammarParser.ASYNC)
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.DEF]:
                self.state = 824
                self.funcdef()
                pass
            elif token in [GrammarParser.WITH]:
                self.state = 825
                self.with_stmt()
                pass
            elif token in [GrammarParser.FOR]:
                self.state = 826
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._suite = None # SuiteContext
            self.num_suite = list() # of SuiteContexts

        def IF(self):
            return self.getToken(GrammarParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COLON)
            else:
                return self.getToken(GrammarParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SuiteContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.ELIF)
            else:
                return self.getToken(GrammarParser.ELIF, i)

        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_if_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = GrammarParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(GrammarParser.IF)
            self.state = 830
            self.test()
            self.state = 831
            self.match(GrammarParser.COLON)
            self.state = 832
            localctx._suite = self.suite()
            localctx.num_suite.append(localctx._suite)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.ELIF:
                self.state = 833
                self.match(GrammarParser.ELIF)
                self.state = 834
                self.test()
                self.state = 835
                self.match(GrammarParser.COLON)
                self.state = 836
                localctx._suite = self.suite()
                localctx.num_suite.append(localctx._suite)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.ELSE:
                self.state = 843
                self.match(GrammarParser.ELSE)
                self.state = 844
                self.match(GrammarParser.COLON)
                self.state = 845
                localctx._suite = self.suite()
                localctx.num_suite.append(localctx._suite)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(GrammarParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COLON)
            else:
                return self.getToken(GrammarParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SuiteContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_while_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = GrammarParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(GrammarParser.WHILE)
            self.state = 849
            self.test()
            self.state = 850
            self.match(GrammarParser.COLON)
            self.state = 851
            self.suite()
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.ELSE:
                self.state = 852
                self.match(GrammarParser.ELSE)
                self.state = 853
                self.match(GrammarParser.COLON)
                self.state = 854
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(GrammarParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(GrammarParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(GrammarParser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COLON)
            else:
                return self.getToken(GrammarParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SuiteContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_for_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = GrammarParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(GrammarParser.FOR)
            self.state = 858
            self.exprlist()
            self.state = 859
            self.match(GrammarParser.IN)
            self.state = 860
            self.testlist()
            self.state = 861
            self.match(GrammarParser.COLON)
            self.state = 862
            self.suite()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.ELSE:
                self.state = 863
                self.match(GrammarParser.ELSE)
                self.state = 864
                self.match(GrammarParser.COLON)
                self.state = 865
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(GrammarParser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COLON)
            else:
                return self.getToken(GrammarParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SuiteContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(GrammarParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_try_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = GrammarParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(GrammarParser.TRY)
            self.state = 869
            self.match(GrammarParser.COLON)
            self.state = 870
            self.suite()
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.EXCEPT]:
                self.state = 875 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 871
                    self.except_clause()
                    self.state = 872
                    self.match(GrammarParser.COLON)
                    self.state = 873
                    self.suite()
                    self.state = 877 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GrammarParser.EXCEPT):
                        break

                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.ELSE:
                    self.state = 879
                    self.match(GrammarParser.ELSE)
                    self.state = 880
                    self.match(GrammarParser.COLON)
                    self.state = 881
                    self.suite()


                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.FINALLY:
                    self.state = 884
                    self.match(GrammarParser.FINALLY)
                    self.state = 885
                    self.match(GrammarParser.COLON)
                    self.state = 886
                    self.suite()


                pass
            elif token in [GrammarParser.FINALLY]:
                self.state = 889
                self.match(GrammarParser.FINALLY)
                self.state = 890
                self.match(GrammarParser.COLON)
                self.state = 891
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(GrammarParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.With_itemContext)
            else:
                return self.getTypedRuleContext(GrammarParser.With_itemContext,i)


        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_with_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = GrammarParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(GrammarParser.WITH)
            self.state = 895
            self.with_item()
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.COMMA:
                self.state = 896
                self.match(GrammarParser.COMMA)
                self.state = 897
                self.with_item()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 903
            self.match(GrammarParser.COLON)
            self.state = 904
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def AS(self):
            return self.getToken(GrammarParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(GrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_with_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = GrammarParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.test()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.AS:
                self.state = 907
                self.match(GrammarParser.AS)
                self.state = 908
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(GrammarParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def AS(self):
            return self.getToken(GrammarParser.AS, 0)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_except_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = GrammarParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(GrammarParser.EXCEPT)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                self.state = 912
                self.test()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.AS:
                    self.state = 913
                    self.match(GrammarParser.AS)
                    self.state = 914
                    self.match(GrammarParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._stmt = None # StmtContext
            self.num_stmt = list() # of StmtContexts

        def simple_stmt(self):
            return self.getTypedRuleContext(GrammarParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(GrammarParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(GrammarParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.StmtContext)
            else:
                return self.getTypedRuleContext(GrammarParser.StmtContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_suite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = GrammarParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.RETURN, GrammarParser.RAISE, GrammarParser.FROM, GrammarParser.IMPORT, GrammarParser.GLOBAL, GrammarParser.NONLOCAL, GrammarParser.ASSERT, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.YIELD, GrammarParser.DEL, GrammarParser.PASS, GrammarParser.CONTINUE, GrammarParser.BREAK, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.simple_stmt()
                pass
            elif token in [GrammarParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.match(GrammarParser.NEWLINE)
                self.state = 921
                self.match(GrammarParser.INDENT)
                self.state = 923 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 922
                    localctx._stmt = self.stmt()
                    localctx.num_stmt.append(localctx._stmt)
                    self.state = 925 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.T__0) | (1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.DEF) | (1 << GrammarParser.RETURN) | (1 << GrammarParser.RAISE) | (1 << GrammarParser.FROM) | (1 << GrammarParser.IMPORT) | (1 << GrammarParser.GLOBAL) | (1 << GrammarParser.NONLOCAL) | (1 << GrammarParser.ASSERT) | (1 << GrammarParser.IF) | (1 << GrammarParser.WHILE) | (1 << GrammarParser.FOR) | (1 << GrammarParser.TRY) | (1 << GrammarParser.WITH) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.CLASS) | (1 << GrammarParser.YIELD) | (1 << GrammarParser.DEL) | (1 << GrammarParser.PASS) | (1 << GrammarParser.CONTINUE) | (1 << GrammarParser.BREAK) | (1 << GrammarParser.ASYNC) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)) | (1 << (GrammarParser.AT - 71)))) != 0)):
                        break

                self.state = 927
                self.match(GrammarParser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Or_testContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Or_testContext,i)


        def IF(self):
            return self.getToken(GrammarParser.IF, 0)

        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(GrammarParser.LambdefContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_test

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = GrammarParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 931
                self.or_test()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.IF:
                    self.state = 932
                    self.match(GrammarParser.IF)
                    self.state = 933
                    self.or_test()
                    self.state = 934
                    self.match(GrammarParser.ELSE)
                    self.state = 935
                    self.test()


                pass
            elif token in [GrammarParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(GrammarParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(GrammarParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_test_nocond

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = GrammarParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_test_nocond)
        try:
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.or_test()
                pass
            elif token in [GrammarParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(GrammarParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(GrammarParser.VarargslistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_lambdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = GrammarParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(GrammarParser.LAMBDA)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (GrammarParser.NAME - 61)) | (1 << (GrammarParser.STAR - 61)) | (1 << (GrammarParser.POWER - 61)))) != 0):
                self.state = 947
                self.varargslist()


            self.state = 950
            self.match(GrammarParser.COLON)
            self.state = 951
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(GrammarParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(GrammarParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(GrammarParser.VarargslistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_lambdef_nocond

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = GrammarParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(GrammarParser.LAMBDA)
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (GrammarParser.NAME - 61)) | (1 << (GrammarParser.STAR - 61)) | (1 << (GrammarParser.POWER - 61)))) != 0):
                self.state = 954
                self.varargslist()


            self.state = 957
            self.match(GrammarParser.COLON)
            self.state = 958
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s45 = None # Token
            self.num_or = list() # of Tokens

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.And_testContext)
            else:
                return self.getTypedRuleContext(GrammarParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.OR)
            else:
                return self.getToken(GrammarParser.OR, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_or_test

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = GrammarParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.and_test()
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.OR:
                self.state = 961
                localctx.s45 = self.match(GrammarParser.OR)
                localctx.num_or.append(localctx.s45)
                self.state = 962
                self.and_test()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s46 = None # Token
            self.num_and = list() # of Tokens

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Not_testContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.AND)
            else:
                return self.getToken(GrammarParser.AND, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_and_test

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = GrammarParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.not_test()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.AND:
                self.state = 969
                localctx.s46 = self.match(GrammarParser.AND)
                localctx.num_and.append(localctx.s46)
                self.state = 970
                self.not_test()
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(GrammarParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(GrammarParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(GrammarParser.ComparisonContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_not_test

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = GrammarParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_not_test)
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 976
                self.match(GrammarParser.NOT)
                self.state = 977
                self.not_test()
                pass
            elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._comp_op = None # Comp_opContext
            self.num_comp = list() # of Comp_opContexts

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Comp_opContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_comparison

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = GrammarParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.expr()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (GrammarParser.IN - 39)) | (1 << (GrammarParser.NOT - 39)) | (1 << (GrammarParser.IS - 39)) | (1 << (GrammarParser.LESS_THAN - 39)) | (1 << (GrammarParser.GREATER_THAN - 39)) | (1 << (GrammarParser.EQUALS - 39)) | (1 << (GrammarParser.GT_EQ - 39)) | (1 << (GrammarParser.LT_EQ - 39)) | (1 << (GrammarParser.NOT_EQ_1 - 39)) | (1 << (GrammarParser.NOT_EQ_2 - 39)))) != 0):
                self.state = 982
                localctx._comp_op = self.comp_op()
                localctx.num_comp.append(localctx._comp_op)
                self.state = 983
                self.expr()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(GrammarParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(GrammarParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(GrammarParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(GrammarParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(GrammarParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(GrammarParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(GrammarParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(GrammarParser.IN, 0)

        def NOT(self):
            return self.getToken(GrammarParser.NOT, 0)

        def IS(self):
            return self.getToken(GrammarParser.IS, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_comp_op

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = GrammarParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comp_op)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(GrammarParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(GrammarParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.match(GrammarParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 993
                self.match(GrammarParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 994
                self.match(GrammarParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 995
                self.match(GrammarParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 996
                self.match(GrammarParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 997
                self.match(GrammarParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 998
                self.match(GrammarParser.NOT)
                self.state = 999
                self.match(GrammarParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1000
                self.match(GrammarParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1001
                self.match(GrammarParser.IS)
                self.state = 1002
                self.match(GrammarParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(GrammarParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(GrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_star_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = GrammarParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(GrammarParser.STAR)
            self.state = 1006
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s82 = None # Token
            self.num_or = list() # of Tokens

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Xor_exprContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.OR_OP)
            else:
                return self.getToken(GrammarParser.OR_OP, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = GrammarParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.xor_expr()
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.OR_OP:
                self.state = 1009
                localctx.s82 = self.match(GrammarParser.OR_OP)
                localctx.num_or.append(localctx.s82)
                self.state = 1010
                self.xor_expr()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s83 = None # Token
            self.num_xor = list() # of Tokens

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.And_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.And_exprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.XOR)
            else:
                return self.getToken(GrammarParser.XOR, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_xor_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = GrammarParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.and_expr()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.XOR:
                self.state = 1017
                localctx.s83 = self.match(GrammarParser.XOR)
                localctx.num_xor.append(localctx.s83)
                self.state = 1018
                self.and_expr()
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s84 = None # Token
            self.num_and = list() # of Tokens

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Shift_exprContext,i)


        def AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.AND_OP)
            else:
                return self.getToken(GrammarParser.AND_OP, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_and_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = GrammarParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.shift_expr()
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.AND_OP:
                self.state = 1025
                localctx.s84 = self.match(GrammarParser.AND_OP)
                localctx.num_and.append(localctx.s84)
                self.state = 1026
                self.shift_expr()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s85 = None # Token
            self.num_shift = list() # of Tokens
            self.s86 = None # Token
            self._tset1848 = None # Token

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Arith_exprContext,i)


        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.LEFT_SHIFT)
            else:
                return self.getToken(GrammarParser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.RIGHT_SHIFT)
            else:
                return self.getToken(GrammarParser.RIGHT_SHIFT, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_shift_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = GrammarParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.arith_expr()
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.LEFT_SHIFT or _la==GrammarParser.RIGHT_SHIFT:
                self.state = 1033
                localctx._tset1848 = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==GrammarParser.LEFT_SHIFT or _la==GrammarParser.RIGHT_SHIFT):
                    localctx._tset1848 = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.num_shift.append(localctx._tset1848)
                self.state = 1034
                self.arith_expr()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s87 = None # Token
            self.num_arith = list() # of Tokens
            self.s88 = None # Token
            self._tset1867 = None # Token

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TermContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.ADD)
            else:
                return self.getToken(GrammarParser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.MINUS)
            else:
                return self.getToken(GrammarParser.MINUS, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_arith_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = GrammarParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.term()
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GrammarParser.ADD or _la==GrammarParser.MINUS:
                self.state = 1041
                localctx._tset1867 = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==GrammarParser.ADD or _la==GrammarParser.MINUS):
                    localctx._tset1867 = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                localctx.num_arith.append(localctx._tset1867)
                self.state = 1042
                self.term()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.FactorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.FactorContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.STAR)
            else:
                return self.getToken(GrammarParser.STAR, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.AT)
            else:
                return self.getToken(GrammarParser.AT, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.DIV)
            else:
                return self.getToken(GrammarParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.MOD)
            else:
                return self.getToken(GrammarParser.MOD, i)

        def IDIV(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.IDIV)
            else:
                return self.getToken(GrammarParser.IDIV, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_term

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = GrammarParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.factor()
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (GrammarParser.STAR - 72)) | (1 << (GrammarParser.DIV - 72)) | (1 << (GrammarParser.MOD - 72)) | (1 << (GrammarParser.IDIV - 72)) | (1 << (GrammarParser.AT - 72)))) != 0):
                self.state = 1049
                _la = self._input.LA(1)
                if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (GrammarParser.STAR - 72)) | (1 << (GrammarParser.DIV - 72)) | (1 << (GrammarParser.MOD - 72)) | (1 << (GrammarParser.IDIV - 72)) | (1 << (GrammarParser.AT - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1050
                self.factor()
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(GrammarParser.FactorContext,0)


        def ADD(self):
            return self.getToken(GrammarParser.ADD, 0)

        def MINUS(self):
            return self.getToken(GrammarParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(GrammarParser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(GrammarParser.PowerContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_factor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = GrammarParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                _la = self._input.LA(1)
                if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (GrammarParser.ADD - 87)) | (1 << (GrammarParser.MINUS - 87)) | (1 << (GrammarParser.NOT_OP - 87)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1057
                self.factor()
                pass
            elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(GrammarParser.Atom_exprContext,0)


        def POWER(self):
            return self.getToken(GrammarParser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(GrammarParser.FactorContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_power

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = GrammarParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.atom_expr()
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.POWER:
                self.state = 1062
                self.match(GrammarParser.POWER)
                self.state = 1063
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._trailer = None # TrailerContext
            self.num_trailer = list() # of TrailerContexts

        def atom(self):
            return self.getTypedRuleContext(GrammarParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(GrammarParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TrailerContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TrailerContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_atom_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = GrammarParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.AWAIT:
                self.state = 1066
                self.match(GrammarParser.AWAIT)


            self.state = 1069
            self.atom()
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (GrammarParser.DOT - 70)) | (1 << (GrammarParser.OPEN_PAREN - 70)) | (1 << (GrammarParser.OPEN_BRACK - 70)))) != 0):
                self.state = 1070
                localctx._trailer = self.trailer()
                localctx.num_trailer.append(localctx._trailer)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(GrammarParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(GrammarParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(GrammarParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(GrammarParser.CLOSE_BRACE, 0)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def ELLIPSIS(self):
            return self.getToken(GrammarParser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(GrammarParser.NONE, 0)

        def TRUE(self):
            return self.getToken(GrammarParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(GrammarParser.FALSE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(GrammarParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(GrammarParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(GrammarParser.DictorsetmakerContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.STRING)
            else:
                return self.getToken(GrammarParser.STRING, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = GrammarParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.OPEN_PAREN]:
                self.state = 1076
                self.match(GrammarParser.OPEN_PAREN)
                self.state = 1079
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.YIELD]:
                    self.state = 1077
                    self.yield_expr()
                    pass
                elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.STAR, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                    self.state = 1078
                    self.testlist_comp()
                    pass
                elif token in [GrammarParser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 1081
                self.match(GrammarParser.CLOSE_PAREN)
                pass
            elif token in [GrammarParser.OPEN_BRACK]:
                self.state = 1082
                self.match(GrammarParser.OPEN_BRACK)
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 1083
                    self.testlist_comp()


                self.state = 1086
                self.match(GrammarParser.CLOSE_BRACK)
                pass
            elif token in [GrammarParser.OPEN_BRACE]:
                self.state = 1087
                self.match(GrammarParser.OPEN_BRACE)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.POWER - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 1088
                    self.dictorsetmaker()


                self.state = 1091
                self.match(GrammarParser.CLOSE_BRACE)
                pass
            elif token in [GrammarParser.NAME]:
                self.state = 1092
                self.match(GrammarParser.NAME)
                pass
            elif token in [GrammarParser.NUMBER]:
                self.state = 1093
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [GrammarParser.STRING]:
                self.state = 1095 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1094
                    self.match(GrammarParser.STRING)
                    self.state = 1097 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GrammarParser.STRING):
                        break

                pass
            elif token in [GrammarParser.ELLIPSIS]:
                self.state = 1099
                self.match(GrammarParser.ELLIPSIS)
                pass
            elif token in [GrammarParser.NONE]:
                self.state = 1100
                self.match(GrammarParser.NONE)
                pass
            elif token in [GrammarParser.TRUE]:
                self.state = 1101
                self.match(GrammarParser.TRUE)
                pass
            elif token in [GrammarParser.FALSE]:
                self.state = 1102
                self.match(GrammarParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(GrammarParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_testlist_comp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = GrammarParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.state = 1105
                self.test()
                pass
            elif token in [GrammarParser.STAR]:
                self.state = 1106
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1123
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.FOR, GrammarParser.ASYNC]:
                self.state = 1109
                self.comp_for()
                pass
            elif token in [GrammarParser.CLOSE_PAREN, GrammarParser.COMMA, GrammarParser.CLOSE_BRACK]:
                self.state = 1117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1110
                        self.match(GrammarParser.COMMA)
                        self.state = 1113
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                            self.state = 1111
                            self.test()
                            pass
                        elif token in [GrammarParser.STAR]:
                            self.state = 1112
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1119
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COMMA:
                    self.state = 1120
                    self.match(GrammarParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(GrammarParser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(GrammarParser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(GrammarParser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(GrammarParser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(GrammarParser.DOT, 0)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_trailer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = GrammarParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.match(GrammarParser.OPEN_PAREN)
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.POWER - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 1126
                    self.arglist()


                self.state = 1129
                self.match(GrammarParser.CLOSE_PAREN)
                pass
            elif token in [GrammarParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.match(GrammarParser.OPEN_BRACK)
                self.state = 1131
                self.subscriptlist()
                self.state = 1132
                self.match(GrammarParser.CLOSE_BRACK)
                pass
            elif token in [GrammarParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.match(GrammarParser.DOT)
                self.state = 1135
                self.match(GrammarParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(GrammarParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_subscriptlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = GrammarParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.subscript()
            self.state = 1143
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1139
                    self.match(GrammarParser.COMMA)
                    self.state = 1140
                    self.subscript() 
                self.state = 1145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 1146
                self.match(GrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(GrammarParser.SliceopContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_subscript

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = GrammarParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 1150
                    self.test()


                self.state = 1153
                self.match(GrammarParser.COLON)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 1154
                    self.test()


                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.COLON:
                    self.state = 1157
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_sliceop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = GrammarParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(GrammarParser.COLON)
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                self.state = 1163
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_exprlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = GrammarParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.state = 1166
                self.expr()
                pass
            elif token in [GrammarParser.STAR]:
                self.state = 1167
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1170
                    self.match(GrammarParser.COMMA)
                    self.state = 1173
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                        self.state = 1171
                        self.expr()
                        pass
                    elif token in [GrammarParser.STAR]:
                        self.state = 1172
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 1180
                self.match(GrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_testlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = GrammarParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.test()
            self.state = 1188
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1184
                    self.match(GrammarParser.COMMA)
                    self.state = 1185
                    self.test() 
                self.state = 1190
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 1191
                self.match(GrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COLON)
            else:
                return self.getToken(GrammarParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.POWER)
            else:
                return self.getToken(GrammarParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(GrammarParser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_dictorsetmaker

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = GrammarParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1200
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                    self.state = 1194
                    self.test()
                    self.state = 1195
                    self.match(GrammarParser.COLON)
                    self.state = 1196
                    self.test()
                    pass
                elif token in [GrammarParser.POWER]:
                    self.state = 1198
                    self.match(GrammarParser.POWER)
                    self.state = 1199
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.FOR, GrammarParser.ASYNC]:
                    self.state = 1202
                    self.comp_for()
                    pass
                elif token in [GrammarParser.COMMA, GrammarParser.CLOSE_BRACE]:
                    self.state = 1214
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1203
                            self.match(GrammarParser.COMMA)
                            self.state = 1210
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                                self.state = 1204
                                self.test()
                                self.state = 1205
                                self.match(GrammarParser.COLON)
                                self.state = 1206
                                self.test()
                                pass
                            elif token in [GrammarParser.POWER]:
                                self.state = 1208
                                self.match(GrammarParser.POWER)
                                self.state = 1209
                                self.expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1216
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                    self.state = 1218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GrammarParser.COMMA:
                        self.state = 1217
                        self.match(GrammarParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                    self.state = 1222
                    self.test()
                    pass
                elif token in [GrammarParser.STAR]:
                    self.state = 1223
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1240
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GrammarParser.FOR, GrammarParser.ASYNC]:
                    self.state = 1226
                    self.comp_for()
                    pass
                elif token in [GrammarParser.COMMA, GrammarParser.CLOSE_BRACE]:
                    self.state = 1234
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1227
                            self.match(GrammarParser.COMMA)
                            self.state = 1230
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                                self.state = 1228
                                self.test()
                                pass
                            elif token in [GrammarParser.STAR]:
                                self.state = 1229
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1236
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GrammarParser.COMMA:
                        self.state = 1237
                        self.match(GrammarParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(GrammarParser.CLASS, 0)

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def COLON(self):
            return self.getToken(GrammarParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(GrammarParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(GrammarParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(GrammarParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(GrammarParser.ArglistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_classdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = GrammarParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(GrammarParser.CLASS)
            self.state = 1245
            self.match(GrammarParser.NAME)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.OPEN_PAREN:
                self.state = 1246
                self.match(GrammarParser.OPEN_PAREN)
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.STAR - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.POWER - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                    self.state = 1247
                    self.arglist()


                self.state = 1250
                self.match(GrammarParser.CLOSE_PAREN)


            self.state = 1253
            self.match(GrammarParser.COLON)
            self.state = 1254
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._argument = None # ArgumentContext
            self.num_arg = list() # of ArgumentContexts

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_arglist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = GrammarParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            localctx._argument = self.argument()
            localctx.num_arg.append(localctx._argument)
            self.state = 1261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1257
                    self.match(GrammarParser.COMMA)
                    self.state = 1258
                    localctx._argument = self.argument()
                    localctx.num_arg.append(localctx._argument) 
                self.state = 1263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.COMMA:
                self.state = 1264
                self.match(GrammarParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._comp_for = None # Comp_forContext
            self.is_compfor = list() # of Comp_forContexts

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.TestContext)
            else:
                return self.getTypedRuleContext(GrammarParser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(GrammarParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(GrammarParser.POWER, 0)

        def STAR(self):
            return self.getToken(GrammarParser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(GrammarParser.Comp_forContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_argument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = GrammarParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1267
                self.test()
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GrammarParser.FOR or _la==GrammarParser.ASYNC:
                    self.state = 1268
                    localctx._comp_for = self.comp_for()
                    localctx.is_compfor.append(localctx._comp_for)


                pass

            elif la_ == 2:
                self.state = 1271
                self.test()
                self.state = 1272
                self.match(GrammarParser.ASSIGN)
                self.state = 1273
                self.test()
                pass

            elif la_ == 3:
                self.state = 1275
                self.match(GrammarParser.POWER)
                self.state = 1276
                self.test()
                pass

            elif la_ == 4:
                self.state = 1277
                self.match(GrammarParser.STAR)
                self.state = 1278
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(GrammarParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(GrammarParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_comp_iter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = GrammarParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_comp_iter)
        try:
            self.state = 1283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.FOR, GrammarParser.ASYNC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.comp_for()
                pass
            elif token in [GrammarParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(GrammarParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(GrammarParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(GrammarParser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(GrammarParser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(GrammarParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_comp_for

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = GrammarParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GrammarParser.ASYNC:
                self.state = 1285
                self.match(GrammarParser.ASYNC)


            self.state = 1288
            self.match(GrammarParser.FOR)
            self.state = 1289
            self.exprlist()
            self.state = 1290
            self.match(GrammarParser.IN)
            self.state = 1291
            self.or_test()
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.IF) | (1 << GrammarParser.FOR) | (1 << GrammarParser.ASYNC))) != 0):
                self.state = 1292
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(GrammarParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(GrammarParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(GrammarParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_comp_if

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = GrammarParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(GrammarParser.IF)
            self.state = 1296
            self.test_nocond()
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.IF) | (1 << GrammarParser.FOR) | (1 << GrammarParser.ASYNC))) != 0):
                self.state = 1297
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GrammarParser.NAME, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_encoding_decl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = GrammarParser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(GrammarParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(GrammarParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(GrammarParser.Yield_argContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_yield_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = GrammarParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(GrammarParser.YIELD)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GrammarParser.STRING) | (1 << GrammarParser.NUMBER) | (1 << GrammarParser.FROM) | (1 << GrammarParser.LAMBDA) | (1 << GrammarParser.NOT) | (1 << GrammarParser.NONE) | (1 << GrammarParser.TRUE) | (1 << GrammarParser.FALSE) | (1 << GrammarParser.AWAIT) | (1 << GrammarParser.NAME))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (GrammarParser.ELLIPSIS - 71)) | (1 << (GrammarParser.OPEN_PAREN - 71)) | (1 << (GrammarParser.OPEN_BRACK - 71)) | (1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.MINUS - 71)) | (1 << (GrammarParser.NOT_OP - 71)) | (1 << (GrammarParser.OPEN_BRACE - 71)))) != 0):
                self.state = 1303
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(GrammarParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(GrammarParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(GrammarParser.TestlistContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_yield_arg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = GrammarParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_yield_arg)
        try:
            self.state = 1309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GrammarParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                self.match(GrammarParser.FROM)
                self.state = 1307
                self.test()
                pass
            elif token in [GrammarParser.STRING, GrammarParser.NUMBER, GrammarParser.LAMBDA, GrammarParser.NOT, GrammarParser.NONE, GrammarParser.TRUE, GrammarParser.FALSE, GrammarParser.AWAIT, GrammarParser.NAME, GrammarParser.ELLIPSIS, GrammarParser.OPEN_PAREN, GrammarParser.OPEN_BRACK, GrammarParser.ADD, GrammarParser.MINUS, GrammarParser.NOT_OP, GrammarParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1308
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





